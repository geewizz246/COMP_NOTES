#include<stdio.h>
#include<errno.h>
#include<string.h>
#include<stdlib.h>
#include<stdbool.h>
#define string_length 30
#define LENGTH 100//NUMBER OF RECORDS IN THE FILE

struct customerInfo {

	int id;

	char first_name[ string_length ];
	char last_name[ string_length ];

	char address[ string_length ];
	char telephoneNumber[ string_length ];

};



struct productInfo {

	int quantity,id;
	char productName[ string_length ];
	float unitPrice;
	float totalMoetaryValue;
	float sellPrice;
	int amount;
	float totalProductSales,productSales;
	int productChoice;
};



struct orderInfo {
	char first_name[ string_length ];
	char last_name[ string_length ];
	char food [ string_length ];
	int orderAuto;
	float price;
	float payment[100];
	int food_id[100];
	int amount[100];
	int id;// every record MUST have some varaible that uniquely identifies it.
	// The record are stored in the binary files based on this "primary key"




	int position;
////this is person's position in queue
};




//function genrerates and writes index to a file

int autocreateIndex(int autoGeneratedIndex) 
{
	FILE*fileIndex;
	int index;
	if ((fileIndex = fopen("auto", "w"))==NULL) 
	{
		printf("Cannot open file \n");
		exit(1);
	}

	else 
	{
		index=autoGeneratedIndex;

		/*printing data to file*/
		fprintf(fileIndex,"%d",index);//writes the generated index to the record.

		fclose(fileIndex);/*close file*/
	}
}//end function




//reads index from the file
int readAutoIndex() 
{

	FILE*readAutoIndex;
	int autoIndex,ans;
	/* open file for reading */
	if ((readAutoIndex= fopen("auto", "r"))==NULL) 
	{
		printf("Cannot open file \n");
		exit(errno);
	}/*end if*/

	else
	{
		fscanf(readAutoIndex,"%d",&autoIndex);
		ans=autoIndex;

		//read and display every line in the file
		while(!feof(readAutoIndex))//while not the end of the file
		{ 
			fscanf(readAutoIndex,"%d",&autoIndex);
			ans=autoIndex;
		}
		return ans;
		printf("ANS%d",ans);
		fclose(readAutoIndex);  /*close file*/
	}//end else
}//end function



// checks if the queue is empty
bool isEmpty() 
{
	if(readAutoIndex()==-1)
		return true;

	else
		return false;
}//  end isEmpty


void checkIfEmpty() 
{
	if (isEmpty()) //CALL TO FUNCTION THAT RETURNS THE NUMBER OF RECORDS IN THE FILE
	{ 
		printf("\n\n");
		printf("\t============================================================\n\n");
		printf("\t    ===========================FILE IS EMPTY========================\n\n");
		printf("\t============================================================\n\n");
	}//end if
	
	else 
	{
		printf("\n\n");
		printf("\t===========================================================================\n\n");
		printf("\t  ===========================FILE IS NOT EMPTY========================\n\n");
		printf("\t===========================================================================\n\n         ");
	}//end else
}


// "queues up"  records to file in the order entered
void enqueueOrderInfo(FILE*inDataFile1 , struct orderInfo order) 
{
	if ((inDataFile1 = fopen("orderFile", "rb+"))==NULL) //open binary file for reading and writing
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	int Auto=readAutoIndex();  //get index from auto file

	if( Auto== (LENGTH-1))
		printf("Queue full.");

	else 
	{

		Auto= Auto+1;//determine position to write the entered record to in the file


		fseek(inDataFile1,( Auto)*sizeof(struct orderInfo),SEEK_SET);//find point in file to
		//write the record
		fwrite(&order,sizeof(struct orderInfo),1,inDataFile1);//write the record
	}//end else
	fclose(inDataFile1);//close the file
	autocreateIndex(Auto);//write new value of index to the text file

}//end enqueueOrderInfo()


//to determine the number of records in the fileS
int size() 
{
	int numRecords;


	numRecords=(readAutoIndex())+1;


	return (numRecords);

}//end size




void displayMiniProductInfo()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct productInfo products= {0,0,"",0.0,0.0,0.0};

	inDataFile1=fopen ("computerFile","rb+");
	fread(&products,sizeof(struct productInfo),1,inDataFile1);

	while (!feof(inDataFile1)) 
	{
		if (products.id!=0) 
		{
			printf("\tProduct: %s    \n\tId Number: %d	\n\tQuantity: %d	\n\tPrice: $%.2f\n\n",products.productName,products.id,products.quantity,products.sellPrice);
		}
		fread(&products,sizeof(struct productInfo),1,inDataFile1);
	}
	fclose(inDataFile1);
}



//Function provides the user with a menu from which they can choose their options
int MenuChoice() 
{
	int choice;//local variable which holds the option entered by the user

	printf("\n\n");
	printf("\n\n");
	printf("\n\n");



	printf("\n\n");
	printf("\n\n");
	printf("\n\n");

	printf("============================================================\n\n         ");
	printf("OPTION              DESCRIPTION                   \n\n");
	printf("============================================================\n\n");

	
	printf("	1               Add Order Information\n\n");
	printf("	2               Display Order information \n\n");
	printf("	3               Send Out an Order\n\n ");
	printf("	4               Query number of records in the file\n \n");
	printf("	5               Check if file is empty\n \n");
	printf("	6               Exit program\n\n ");



	printf("============================================================\n\n      ");
	printf("=>=>=>=>=>=>=>ELECTRONIC ENTERTAINMENT=>=>=>=>=>=>=>\n\n");
	printf("============================================================\n\n         ");


	printf("\n\n");
	printf("\n\n");
	printf("Task=====>");

	

	scanf("%d",&choice);
	
	while ((choice>8)||(choice<1))
	{
		printf("AN INCORRECT NUMBER WAS ENTERED TO ACTIVATE A FUNCTION\n\n");
		printf("Please Re-enter Task=====>");
    	scanf("%d",&choice);
	}    
	
	return choice;// the option choice by the user is returned to main-the function that called it
}/*End Function*/

int AdminChoice() 
{
	int choice;//local variable which holds the option entered by the user

	printf("\n\n");
	printf("\n\n");
	printf("\n\n");



	printf("\n\n");
	printf("\n\n");
	printf("\n\n");

	printf("============================================================\n\n         ");
	printf("OPTION              DESCRIPTION                   \n\n");
	printf("============================================================\n\n");



	printf("	1				Create a Computer File\n\n");
	printf("	2				Add Computer Product Records\n\n");
	printf("	3				Display Computer Product Records\n\n");
	printf("	4				Update Computer Product Records\n\n");

	printf("	5				Create a Customer File\n\n");
	printf("	6				Add Customer Information\n\n");
	printf("	7				Display Customer Information\n\n");
	printf("	8				Update Customer Information\n\n");

	printf("	9				Create Order File\n\n");
	printf("	10				Add Orders\n\n");
	printf("	11				Display Orders \n\n");
	printf("	12				Send out an Order\n\n ");
	printf("	13				Query number of records in the file\n \n");
	printf("	14				Check if file is empty\n \n");
	printf("	15				End Program\n\n");



	printf("============================================================\n\n         ");
	printf("=>=>=>=>=>=>=>ELECTRONIC ENTERTAINMENT=>=>=>=>=>=>=>\n\n");
	printf("============================================================\n\n         ");


	printf("\n\n");
	printf("\n\n");
	printf("Task=====>");
	
	
	scanf("%d",&choice);
	
	while ((choice>15)||(choice<1))
	{
		printf("AN INCORRECT NUMBER WAS ENTERED TO ACTIVATE A FUNCTION\n\n");
		printf("Please Re-enter Task=====>");
    	scanf("%d",&choice);
	}    
    
	return choice;// the option choice by the user is returned to main-the function that called it
}/*End Function*/


void createProductFile() 
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct productInfo products= {0,0,0.0,0.0,0.0}; //create productinfo with default information


	if ((inDataFile1 = fopen("computerFile","wb"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	else
	{
		for (f=0; f<20; f++)
		{
			fwrite(&products,sizeof(struct productInfo),1,inDataFile1);
		} /*end for*/

		fclose(inDataFile1);
	}/*end else*/

	printf("============================================================\n\n");
	printf("            COMPUTER FILE CREATED                 \n\n");
	printf("============================================================\n\n");
}


void addProductInfo() 
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct productInfo products= {0,0,"",0.0,0.0,0.0};

	if ((inDataFile1 = fopen("computerFile","rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/


	printf("Enter the ID of item ---->");
	scanf("%d",&products.id);

	printf("Enter the name of item---->");
	scanf("%s",&products.productName);

	printf("Enter quantity--->");
	scanf("%d",&products.quantity);

	printf("Enter purchase price--->");
	scanf("%f",&products.unitPrice);

	printf("Enter price---->");
	scanf("%f",&products.sellPrice);

	products.totalMoetaryValue=products.quantity*products.unitPrice;

	fseek(inDataFile1,(products.id-1)*sizeof(struct productInfo),SEEK_SET);
	fwrite(&products,sizeof(struct productInfo),1,inDataFile1);
	fclose(inDataFile1);
}







void viewProductRecords()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct productInfo products= {0,0,"",0.0,0.0,0.0};

	if ((inDataFile1 = fopen("computerFile", "rb+"))==NULL) 
	{
		printf("Cannot open File\n");
	}/*end if*/


	else
	{
		printf("============================================================\n");
		printf("             \n\t\t\tLIST OF PRODUCTS              \n\n");
		printf("============================================================\n\n");


		fread(&products,sizeof(struct productInfo),1,inDataFile1);

		while(!feof(inDataFile1))  /*read and display every line in the file*/
		{
			if (products.id!=0)
			{
				printf("Product Id\t\t\t%d\n",products.id);
				printf("Product Name\t\t\t%s\n",products.productName);
				printf("Quantity\t\t\t%d\n",products.quantity);
				printf("Unit Price\t\t\t$%.2f\n",products.unitPrice);
				printf("Selling Price\t\t\t$%.2f\n",products.sellPrice);
				printf("Total Monetary Value\t\t$%.2f\n",products.totalMoetaryValue);
				printf("Total Product Sales\t\t$%.2f",products.totalProductSales);
				printf("\n\n\n\n\n");
			}//END IF
			fread(&products,sizeof(struct productInfo),1,inDataFile1);
		}/*end while*/
	}//end else
	fclose(inDataFile1);
}



void updateProductInfo()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct productInfo products= {0,0,"",0.0,0.0,0.0};

	if ((inDataFile1 = fopen("computerFile", "rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	
	
	else
	{
		printf("============================================================\n\n");
		printf("\t\t PRODUCTS THAT CAN BE UPDATED\n");
		printf("============================================================\n\n");
		displayMiniProductInfo();
		printf("============================================================\n\n\n\n");
		int prod;



		printf("Enter product Id to update--->");
		scanf("%d",&prod);

		fseek(inDataFile1,(prod-1)*sizeof(struct productInfo),SEEK_SET);
		fread(&products,sizeof(struct productInfo),1,inDataFile1);
		/*Read Mode*/


		if(products.id==0)
		{
			printf("============================================================\n\n");
			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");
			printf("============================================================\n\n\n\n\n");
		}/*end if*/

		if (products.id!=0)
		{
			printf("ID---->%d\n",products.id);
			printf("Product Name---->%s\n",products.productName);
			printf("Unit Price---->$%.2f\n",products.unitPrice);
			printf("Selling Price---->$%.2f\n",products.sellPrice);
			printf("Current Quantity is -----> %d\n",products.quantity);
			printf("Current Monetary Value--->$%.2f",products.totalMoetaryValue);
			printf("\n\n");


			printf("Enter amount you Purchased --------->");
			scanf("%d",&products.amount);

			products.quantity=products.quantity+products.amount;/*update Stock*/
			products.totalMoetaryValue=products.quantity*products.unitPrice;/*update Total Monetary Value*/

			printf("TYPE OF PRODUCT---->%s\n",products.productName);
			printf("AMOUNT PURCHASED---->%d\n",products.amount);
			printf("NEW QUANTITY---->%3.2d\n",products.quantity);
			printf("NEW TOTAL MONETARY VALUE--->$%.2f\n",products.totalMoetaryValue);



			fseek(inDataFile1,(products.id-1)*sizeof(struct productInfo),SEEK_SET);
			fwrite(&products,sizeof(struct productInfo),1,inDataFile1);
			fclose(inDataFile1);
		}/*end if*/
	} /*end else*/
}


void createOrderFile() 
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;
	struct orderInfo order= {"","","",0,0.0,0.0,0,0,0};



	autocreateIndex(-1);//when file is FIRST created index is gigen a value of -1

	/* open file for input */
	if ((inDataFile1 = fopen("orderFile", "wb"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	else
	{

		//creating 100 blank records
		for (f=0; f<=100; f++)
		{
			fwrite(&order,sizeof(struct orderInfo),1,inDataFile1);
		} /*end for*/


		fclose(inDataFile1);//closes the file pointer
	}/*end else*/
	printf("============================================================\n\n         ");
	printf("             FILE CREATED                 \n\n");
	printf("============================================================\n\n         ");
}

void createCustomerFile()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct customerInfo customer= {0,"","","",""};


	if ((inDataFile1 = fopen("customerFile","wb"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	else
	{
		for (f=0; f<100; f++)
		{
			fwrite(&customer,sizeof(struct customerInfo),1,inDataFile1);
		} /*end for*/

		fclose(inDataFile1);
	}/*end else*/

	printf("============================================================\n\n");
	printf("            CUSTOMER FILE CREATED                 \n\n");
	printf("============================================================\n\n");

}

void addCustomerInfo()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct customerInfo customer= {0,"","","",""};


	if ((inDataFile1 = fopen("customerFile","rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	printf("Enter the ID of the customer ---->\n");
	scanf("%d",&customer.id);

	printf("Enter the full name of the customer---->\n");
	scanf("%s %s",&customer.first_name,&customer.last_name);

	printf("Enter the address of the customer ---->\n");
	scanf("%s",&customer.address);

	printf("Enter the telephone number of the customer ---->\n");
	scanf("%s",&customer.telephoneNumber);



	fseek(inDataFile1,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);
	fwrite(&customer,sizeof(struct customerInfo),1,inDataFile1);
	fclose(inDataFile1);
}



void viewCustomerRecords()
{
	FILE*inDataFile1;//POINTER TO FILE
	int f;

	struct customerInfo customer= {0,"","","",""};

	if ((inDataFile1 = fopen("customerFile","rb+"))==NULL)
	{
		printf("Cannot open file \n");
	}/*end if*/


	else
	{
		printf("============================================================\n");
		printf("             \n\t\t\tCUSTOMER INFORMATION                 \n\n");
		printf("============================================================\n\n");



		fread(&customer,sizeof(struct customerInfo),1,inDataFile1);
		while(!feof(inDataFile1))  /*read and display every line in the file*/
		{

			if (customer.id!=0) 
			{
				printf("Customer Id\t\t%d\n",customer.id);
				printf("Customer Name\t\t%s %s\n",customer.first_name,customer.last_name);
				printf("Telephone Number\t%s\n",customer.telephoneNumber);
				printf("Home Address\t\t%s",customer.address);
				printf("\n\n");
				printf("============================================================\n\n");
			}//END IF
			fread(&customer,sizeof(struct customerInfo),1,inDataFile1);
		}/*end while*/
		fclose(inDataFile1);
	}//end else

}


void updateCustomerRecords() 
{
	FILE*inDataFile1;//POINTER TO FILE

	struct customerInfo customer= {0,"","","",""};


	if ((inDataFile1 = fopen("customerFile","rb+"))==NULL) {
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/



	else 
	{
		printf("============================================================\n");
		printf("             \n\t\tCUSTOMER INFORMATION THAT CAN BE UPDATED      \n\n");
		printf("============================================================\n\n");


		fread(&customer,sizeof(struct customerInfo),1,inDataFile1);
		printf("FULL NAME	ID NUMBER\n");
		while (!feof(inDataFile1)) 
		{

			if (customer.id!=0) 
			{
				printf("%s %s\t\t%d\n",customer.first_name,customer.last_name,customer.id);
			}
			fread(&customer,sizeof(struct customerInfo),1,inDataFile1);
		}

		int id,choice;

		printf("Enter customer Id to update--->");
		scanf("%d",&id);

		fseek(inDataFile1,(id-1)*sizeof(struct customerInfo),SEEK_SET);
		fread(&customer,sizeof(struct customerInfo),1,inDataFile1);
		/*Read Mode*/
		if(customer.id==0) 
		{

			printf("============================================================\n\n");
			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");
			printf("============================================================\n\n\n\n\n");
		}/*end if*/


		if (customer.id!=0) 
		{
			printf("Would you like to change the telephone number or the address? TELEPHONE (1) ADDRESS(2)\n");
			scanf("%d",&choice);

			if(choice==1) 
			{
				printf("Enter new telephone number--->");
				scanf("%s",&customer.telephoneNumber );
			}

			if(choice==2) 
			{
				printf("Enter new address--->");
				scanf("%s",&customer.address);
			}
			printf("\n\n");

			fseek(inDataFile1,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);
			fwrite(&customer,sizeof(struct customerInfo),1,inDataFile1);
			fclose(inDataFile1);
		}
	}
}








void takeOrders()
{
	FILE*inDataFile1;//POINTER TO FILE
	FILE*inDataFile2;//POINTER TO FILE
	FILE*inDataFile3;//POINTER TO FILE


	struct productInfo products= {0,0,"",0.0,0.0,0.0};
	struct customerInfo customer= {0,"","","",""};
	struct orderInfo order= {"","","",0,0.0,0.0,0,0,0};


	if ((inDataFile2 = fopen("customerFile", "rb+"))==NULL)  //open binary file for reading and writing
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	else
	{
		fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
		printf("FULL NAME	ID NUMBER\n");

		while (!feof(inDataFile2)) 
		{

			if (customer.id!=0)
			{
				printf("%s %s\t%d\n",customer.first_name,customer.last_name,customer.id);
			}
			fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
		}// end while

		int id;

		printf("Enter id of the customer that wishes to order--->");
		scanf("%d",&id); 

		while(id!=-1)
		{
			fseek(inDataFile2,(id-1)*sizeof(struct customerInfo),SEEK_SET);
			fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
			/*Read Mode*/


			if(customer.id==0)
			{
				printf("============================================================\n\n");
				printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");
				printf("============================================================\n\n\n\n\n");
				id=-1;
			}/*end if*/


			if (customer.id!=0) 
			{

				order.id=id;

				if ((inDataFile1 = fopen("computerFile","rb+"))==NULL)
				{
					printf("Cannot open file \n");
					exit(1);
				}/*end if*/
	
				else 
				{
					printf("\n\n=============================================================\n\n");
					printf("		List of Products \n\n");
					printf("=============================================================\n\n");
					displayMiniProductInfo();
					printf("============================================================\n\n\n\n");


					if ((inDataFile3 = fopen("orderFile", "rb+"))==NULL) //open binary file for reading and writing
					{
						printf("Cannot open file \n");
						exit(1);
					}/*end if*/

					else 
					{
						int passAuto=readAutoIndex();

						order.orderAuto=readAutoIndex()+2;
						order.position=0;

						int prod;

						int amts;


						printf("Enter the id of the product---->");
						scanf("%d",&prod);


						while(prod!=-1) 
						{
							fseek(inDataFile1,(prod-1)*sizeof(struct productInfo),SEEK_SET);
							fread(&products,sizeof(struct productInfo),1,inDataFile1);
							/*Read Mode*/


							if(products.id!=prod) 
							{
								printf("============================================================\n\n");
								printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");
								printf("============================================================\n\n\n\n\n");
								prod=-1;
							}/*end if*/

							if (products.id!=0) 
							{

								printf("\n\n");
								order.food_id[order.position]=prod;

								printf("Please enter the quantity of %s sold---->",products.productName);
								scanf("%d",&amts);


								while(amts>products.quantity) 
								{
									printf("\nTHE AMOUNT ENTERED IS TOO LARGE,THIS PRODUCT ONLY CONTAINS %3.2d IN STOCK\n\n",products.quantity);
									printf("Enter amount you sold --------->");
									scanf("%d",&amts);
								}


								products.amount=amts;


								order.amount[order.position]=amts;

								products.quantity=products.quantity-amts;/*update Stock*/


								products.productSales=amts*products.sellPrice;
								products.totalMoetaryValue=products.quantity*products.unitPrice;/*update Total Monetary Value*/

								
								
								order.payment[order.position]=products.sellPrice*amts;
								products.totalProductSales=products.totalProductSales+products.productSales;


								printf("\nTHE NEW NUMBER IS $%.2f\n",order.payment[order.position]);
								order.position=order.position+1;


								fseek(inDataFile1,(prod-1)*sizeof(struct productInfo),SEEK_SET);
								fwrite(&products,sizeof(struct productInfo),1,inDataFile1);				
								
								
								printf("To end the order process press enter -1\n ");
								printf("Do you wish to order new product ---->");
								scanf("%d",&prod);
							}//end product if
						}//endwhile
						enqueueOrderInfo(inDataFile3,order);//call  to function which queues up the orders in the file
						fclose(inDataFile3);
					}//end else
				}//end else
				fclose(inDataFile1);
			}//endif
			printf("Enter id of the customer that wishes to order--->");
			scanf("%d",&id);
		}//end while
	}//else
	fclose(inDataFile2);
}



//This function "dequeues" records from file
int dequeueOrderInfo(FILE*inDataFile1) 
{

	int g,val;
	FILE*inDataFile2;//another pointer to the file has been created
	struct orderInfo order= {"","","",0,0.0,0.0,0,0,0};
	struct orderInfo blankOrder= {"","","",0,0.0,0.0,0,0,0};

	//opening a pointer to the file
	if ((inDataFile1 = fopen("orderFile", "rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	//opening another  pointer to the file
	if ((inDataFile2 = fopen("orderFile", "rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/


	int deleteNum=readAutoIndex();//CALL TO FUNCTION WHICH RETURNS THE INDEX VALUE FROM THE AUTOFILE


	if( deleteNum<0)  /* Check for error situation*/
	{
		printf("FILE IS EMPTY. NO RECORDS PRESENT\n");
		AdminChoice();
	}

	else
	{

		fseek(inDataFile1,(0)*sizeof(struct orderInfo),SEEK_SET);//SEEK RECORD TO DELETE,I.E THE FIRST RECORD
		fread(&order,sizeof(struct orderInfo),1,inDataFile1);//READ RECORD TO DELETE

		printf("order auto is %d\n",order.orderAuto);

		/*Read Mode*/
		if(order.orderAuto==0)  // IF THERE IS NO RECORD
		{
			printf("============================================================\n\n         ");
			printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!                 \n\n");
			printf("============================================================\n\n\n\n\n        ");
		}/*end if*/
	
	
		if(order.orderAuto!=0)  //IF RECORD EXISTS
		{
			fseek(inDataFile1,(1-1)*sizeof(struct orderInfo),SEEK_SET);
			fwrite(&blankOrder,sizeof(struct orderInfo),1,inDataFile1);//OVERWRITE RECORD WITH A BLANK ONE
			printf("============================================================\n\n         ");
			printf("          \n\n\n\t\t\t ORDER HAS BEEN SENT                \n\n");
			printf("============================================================\n\n         ");
			val=order.id;



			for(g=0;g<deleteNum;g++)//Moving up Records in file AFTER the delete
			{
				fseek(inDataFile1,(g)*sizeof(struct orderInfo),SEEK_SET);//find   point  G in file
				fseek(inDataFile2,(g+1)*sizeof(struct orderInfo),SEEK_SET);//find point (G+1) in file
				fread(&order,sizeof(struct orderInfo),1,inDataFile2);    //READ  record IN SLOT (G+1) OF FILE
				order.orderAuto=g+1;
				fwrite(&order,sizeof(struct orderInfo),1,inDataFile1);//write the record IN SLOT (G+1) OF FILE TO SLOT G
			}//end for
			autocreateIndex(deleteNum-1);//index decremented by 1 after delete and its new value written to the file
		}  //end if

		fclose(inDataFile1);//close pointer to the file
		fclose(inDataFile2);//close second pointer to the file
	} //end else

	return val;
} //end function


void view() //views the contents of the file
{
	FILE*inDataFile;
	FILE*inDataFile3;
	FILE*inDataFile4;
	
	struct orderInfo order= {"","","",0,0.0,0.0,0,0,0};
	struct customerInfo customer= {0,"","","",""};
	struct productInfo products= {0,0,"",0.0,0.0,0.0};

	if ((inDataFile4 = fopen("customerFile", "rb+"))==NULL) //open binary file for reading and writing
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	if ((inDataFile = fopen("orderFile", "rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	if ((inDataFile3 = fopen("computerFile","rb+"))==NULL)
	{
		printf("Cannot open file \n");
		exit(1);
	}/*end if*/

	

	printf("============================================================\n");
	printf("             \n\t\t\tLIST OF ORDERS                 \n\n");
	printf("============================================================\n\n");


	int y;
	int u=0;
	int numRec=size();

	/*read and display every line in the file*/
	fread(&order,sizeof(struct orderInfo),1,inDataFile);
	
	while((!feof(inDataFile))&&(u<numRec))  //WHILE THE END OF FILE HAS NOT BEEN REACHED
	{

		if(order.orderAuto!=0)
		{
			printf("\tPosition in file\t%d\n\t",order.orderAuto);
			printf("Customer Id\t\t%d\n\t",order.id);
			
			int x=order.id;
			
			fseek(inDataFile4,(x-1)*sizeof(struct customerInfo),SEEK_SET);
			fread(&customer,sizeof(struct customerInfo),1,inDataFile4);
			printf("Customer Name\t\t%s\t%s\n\t",customer.first_name,customer.last_name);

			for(y=0;y<order.position;y++) 
			{
				fseek(inDataFile3,(order.food_id[y]-1)*sizeof(struct productInfo),SEEK_SET);
				fread(&products,sizeof(struct productInfo),1,inDataFile3);

				printf("\n\n\tProduct Chosen\t\t%s\n\t",products.productName);
				printf("Price\t\t\t$%3.2f\n\t",products.sellPrice);
				printf("Quantity\t\t%d\n",order.amount[y]);

				printf("\tCost of Product\t\t$%.2f",order.payment[y]);
			}

			
			printf("\n\n\n");
			
			printf("\n\n");
			printf("============================================================\n\n");
		}/*end if*/
		u=u+1;
		fread(&order,sizeof(struct orderInfo),1,inDataFile);
	}/*end while*/
	fclose(inDataFile);//CLOSE FILE
	fclose(inDataFile3);
	fclose(inDataFile4);
}//end view Function




main() 
{
	FILE*inDataFile1;
	int identification,result,f;
	float amount;
	int adminCheck;
	char password [50];
	char secondaryPassword [50];


	printf("PLEASE ENTER PASSWORD\n");
	scanf("%s",&password);


	while(strcmp(password,"RicePeas246")!=0)
	{
		printf("\n\n\n\n===============================================================\n");
		printf("\n\n\t\tINCORRECT PASSWORD. TRY AGAIN.\n\n\n");
		printf("===============================================================\n\n\n\n");
		printf("PLEASE ENTER PASSWORD\n");
		scanf("%s",&password);
	}


	if (strcmp(password,"RicePeas246")==0)
	{
		printf("\n\n\t=====================================================\n\n");
		printf("\t\t\tACCESS GRANTED. WELCOME\n\n");
		printf("\t======================================================\n\n\n\n");
	}


	printf("Are you an Administrator ? 1 (YES) or 0(NO)");
	scanf("%d",&adminCheck);
	if(adminCheck==0)
	{
		result=MenuChoice();//CALLS THE FUNCTION MenuChoice
		while(result!=6) 
		{
			if(result==1) 
			{
				takeOrders();
				result=MenuChoice();
			}

			if(result==2)
			{
				view();//call to function that displays the records
				result=MenuChoice();
			}
			
			if(result==3)
			{
				int ids=dequeueOrderInfo(inDataFile1);  //CALL TO FUNCTION THAT REMOVES STUDENTS IN FILE.STUDENTS ARE REMOVED
				//USING THE FIRST IN FIRST OUT PRINCIPLE(FIFO)
	
				printf("\n\n");
				printf("=======ORDER WITH ID \t%d HAS BEEN DELIVERED======\n\n",ids);
				result=MenuChoice();
				result=MenuChoice();
			}
			
			if(result==4)
			{
				int numberRecords=size(); //CALL TO FUNCTION THAT RETURNS THE NUMBER OF RECORDS IN THE FILE
				printf("============================================================\n\n         ");
				printf("Number of records in the file---->%d\n\n",numberRecords);
				printf("============================================================\n\n         ");
				result=MenuChoice();
			}
			
			
			if(result==5) // Used to check if the file is empty
			{	
				checkIfEmpty();
				result=MenuChoice();
			}
		}
		
		if(result==6)
		{
			printf("============================================================\n\n         ");
			printf("             END OF PROGRAM.  GOODBYE USER                \n\n");
			printf("============================================================\n\n         ");
			system("pause");
		}
	}
	
	
	if(adminCheck==1)
	{
		printf("PLEASE ENTER SECONDARY PASSWORD \n");
		scanf("%s",&secondaryPassword);


		while(strcmp(secondaryPassword,"RedBlueGreen")!=0)
		{
			printf("\n\n\n\n===============================================================\n");
			printf("\n\n\t\tINCORRECT PASSWORD. TRY AGAIN.\n\n\n");
			printf("===============================================================\n\n\n\n");
			printf("PLEASE ENTER PASSWORD\n");
			scanf("%s",&secondaryPassword);
		}
	
	
		if (strcmp(secondaryPassword,"RedBlueGreen")==0)
		{

			printf("\n\n\t=====================================================\n\n");
			printf("\t\t\tACCESS GRANTED. WELCOME AMINISTRATOR\n\n");
			printf("\t======================================================\n\n\n\n");

			if(adminCheck==1)
			{
				result=AdminChoice();
	

				while(result!=15) 
				{
					if(result==1) 
					{
						createProductFile() ;
						result=AdminChoice();
					}

					if(result==2)
					{
						addProductInfo();
						result=AdminChoice();
					}


					if(result==3) 
					{
						viewProductRecords();
						result=AdminChoice();
					}	
		
	
					if(result==4) 
					{
						updateProductInfo();
						result=AdminChoice();
					}


					if(result==5) 
					{
						createCustomerFile();
						result=AdminChoice();
					}


					if(result==6) 
					{
						addCustomerInfo();
						result=AdminChoice();
					}
	

					if(result==7) 
					{
						viewCustomerRecords();
						result=AdminChoice();
					}


					if(result==8) 
					{
						updateCustomerRecords();
						result=AdminChoice();
					}
	

					if(result==9) 
					{
						createOrderFile();
						result=AdminChoice();
					}




					if(result==10) //To take orders 
					{
						takeOrders();
						result=AdminChoice();
					}
	
	
					if(result==11)  //To display the records of the order file
					{
						view();//call to function that displays the records
						result=AdminChoice();
					}

					if(result==12)  // To  take out an order  when it is ready
					{
						int ids=dequeueOrderInfo(inDataFile1);  //CALL TO FUNCTION THAT REMOVES STUDENTS IN FILE.STUDENTS ARE REMOVED
						//USING THE FIRST IN FIRST OUT PRINCIPLE(FIFO)
	
						printf("\n\n");
						printf("=======ORDER WITH ID \t%d HAS BEEN DELIVERED======\n\n",ids);
						result=AdminChoice();
					}
	
					if(result==13)  //Used  check the number of records in the order file
					{
						int numberRecords=size(); //CALL TO FUNCTION THAT RETURNS THE NUMBER OF RECORDS IN THE FILE
						printf("============================================================\n\n         ");
						printf("Number of records in the file---->%d\n\n",numberRecords);
						printf("============================================================\n\n         ");
						result=AdminChoice();
					}

					if(result==14) // Used to check if the file is empty
					{
						checkIfEmpty();
						result=AdminChoice();
					}
				}
			}
	
			if(result==15) //Used to end the program
			{	
				printf("============================================================\n\n         ");
				printf("             END OF PROGRAM.  GOODBYE USER                \n\n");
				printf("============================================================\n\n         ");
				system("pause");
			}
		}
	}
}
