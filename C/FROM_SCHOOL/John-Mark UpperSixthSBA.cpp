#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define length 100
#define string_length 20

struct shoeInfo
{            
	int shoeId,shoeAmount;
	char name_shoe[string_length];
	char shoe_brand[string_length];
    char shoeType[string_length];
    float Priceshoe;
};

struct customerInfo
{    

	int id,age,numOrders;
	char first_name[string_length ];
	char last_name[string_length ],shoe[string_length];
	char purchase[10][string_length];
	int quantity[10];
	float cost[10];
	float totalCost;
	float totalAmountDue,amountDue[10];
	
	
};
struct queueInfo
{
	int customerAuto;
	int id;
	char first_name[string_length ];
	char last_name[string_length ];
	char shoe[10][string_length];
	float totalCost;
	float cost[10];
	int quantity[10];
	int numOrders;
};

void idFormat(int id)
{
	if(id<10)
	{
	    printf("000%d",id);
	}
	else
	if((id>=10)&&(id<100))
	{
		printf("00%d",id);
	}
	else
	if((id>=100)&&(id<1000))
	{
		printf("0%d",id);
	}
	else
	if(id>=1000)
	{
		printf("%d",id);
	}
};
void customerFormat(FILE*inDataFile2,struct customerInfo customer)
{
	int i;
	if((inDataFile2 = fopen("myfilecustomers", "rb+"))==NULL)
	{
        printf("Cannot open customer file \n");
        exit(1);
    }/*end if*/
    
	printf("Customer ID   ");
	idFormat(customer.id);
	printf("\n%s %s\n\n",customer.first_name,customer.last_name);
	for(i=0;i<customer.numOrders;i++)
	{
		float shoeCostATP=customer.cost[i]/customer.quantity[i];
		
		printf("%d of %s @ $%.2f = $%.2f\n",customer.quantity[i],customer.shoe[i],shoeCostATP,customer.cost[i]);
	}/*end for*/
	printf("\nTotal Cost = $%.2f\n\n\n\n",customer.totalCost);
	fclose(inDataFile2);
}//end customerFormat

void queueFormat(FILE*inDataFile3,struct queueInfo queue)
{
	int i;
	if((inDataFile3 = fopen("myfilequeue", "rb+"))==NULL)
	{
        printf("Cannot open queue file \n");
        exit(1);
    }/*end if*/
    
	printf("Position in file ----> %d\n",queue.customerAuto);
	printf("===Quality Shoes===\n");
	printf("Customer ID   ");
	idFormat(queue.id);
	printf("\n%s %s\n\n",queue.first_name,queue.last_name);
	for(i=0;i<queue.numOrders;i++)
	{
		float shoeCostATP=queue.cost[i]/queue.quantity[i];
		
		printf("%d of %s @ $%.2f = $%.2f\n",queue.quantity[i],queue.shoe[i],shoeCostATP,queue.cost[i]);
	}/*end for*/
	printf("\nTotal Cost = $%.2f\n\n\n\n",queue.totalCost);
	fclose(inDataFile3);
}//end queueFormat

//GENERATES AND WRITES INDEX TO A FILE
void autocreateIndex(int autoGeneratedIndex)
{
	FILE*fileIndex;
	int index;
	
	if((fileIndex = fopen("autoIndex.txt", "w"))==NULL)
	{
		printf("Cannot open index file\n");
		exit(1);
	}/*end if*/
	
	index=autoGeneratedIndex;
	
	/*printing data to file*/
	fprintf(fileIndex,"%d",index);/*writes the generated index to the record*/
	fclose(fileIndex);/*close file*/
}//end autocreateIndex



//READS INDEX FROM FILE
int readAutoIndex()
{
	FILE*readAutoIndex;
	int autoIdx,ans;
	
	/*opening file for reading*/
	if((readAutoIndex = fopen("autoIndex.txt", "r"))==NULL)
	{
		printf("Cannot open index file\n");
		exit(errno);
	}/*end if*/
	else
	{
		
		while(!feof(readAutoIndex))/*while not end of file*/
		{
			fscanf(readAutoIndex,"%d",&autoIdx);
			ans=autoIdx;
		}/*end while*/
		return ans;
		printf("ANS%d",ans);
		fclose(readAutoIndex);
	}/*end else*/
}//end readAutoIndex



//CHECKS IF QUEUE IS EMPTY
bool isEmpty()
{
	if(readAutoIndex()==-1)
	{
		return true;	
	}/*end if*/
	else
	{
		return false;
	}/*end else*/
}//end isEmpty

//DETERMINES NUMBER OF RECORDS IN THE FILES
int size()
{
	int numRecords;
	
	numRecords=(readAutoIndex())+1;
	
	return(numRecords);
}//end size

//SAVES ORDER IN QUEUE FILE
void saveCustomerOrder(FILE*pointer,struct queueInfo queue)
{
	/*open binary file for reading and writing*/
	if((pointer = fopen("myfilequeue", "rb+"))==NULL)
	{
		printf("Cannot open queue file \n");
		exit(1);
	}/*end if*/
	
	int indexs=readAutoIndex();/*get index from auto file*/
	
	if(indexs==(length-1))
	{
		printf("Queue is full.\n");
	}/*end if*/
	else
	{
		indexs++;/*determines position to write the entered record into file*/
		
		/*find point in file to write the record*/
		fseek(pointer,(indexs)*sizeof(struct queueInfo),SEEK_SET);
		fwrite(&queue,sizeof(struct queueInfo),1,pointer);/*write record*/
	}/*end else*/
	
	autocreateIndex(indexs);/*writes new value of index to text file*/
	
	fclose(pointer);/*close file*/
}//end saveCustomerInfo


//"DEQUEUES" RECORDS FROM FILE
void dequeueCustomerOrder(FILE*pointer1)
{
	int i,val;
	FILE*pointer2;/*another pointer to the file is created*/
	struct queueInfo queue={0,0,"","","",0.0,0.0,0};
	struct queueInfo blankQueue={0,0,"","","",0,0.0,0.0,0};
	
	/*open pointer to the file*/
	if((pointer1 = fopen("myfilequeue", "rb+"))==NULL)
	{
		printf("Cannot open queue file \n");
		exit(1);
	}/*end if*/
	/*open another pointer to the file*/
	if((pointer2 = fopen("myfilequeue", "rb+"))==NULL)
	{
		printf("Cannot open queue file \n");
		exit(1);
	}/*end if*/
	
	/*call to function which returns index value from auto file*/
	int deleteNum=readAutoIndex();
	
	if(deleteNum<0)/*check for error situation*/
	{
		printf("FILE IS EMPTY. NO RECORDS PRESENT.\n");
	}
	else
	{
		/*seek record to delete, i.e. the first record*/
		fseek(pointer1,(0)*sizeof(struct queueInfo),SEEK_SET);
		/*read record to delete*/
		fread(&queue,sizeof(struct queueInfo),1,pointer1);
		val=queue.id;
		
		if(queue.customerAuto==0)/*if record doesn't exist*/
		{
			printf("\n\n");
		    printf("============================================================\n\n");
			printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!              \n\n");
			printf("============================================================\n\n");
		}/*end if*/
		
		if(queue.customerAuto!=0)/*if record exists*/
		{
			fseek(pointer1,(0)*sizeof(struct queueInfo),SEEK_SET);
			fwrite(&blankQueue,sizeof(struct queueInfo),1,pointer1);
			
			printf("\n\n");
			printf("============================================================\n\n");
			printf("\t\t\t DELETE COMPLETE \t\t\t\n\n");
		    printf("============================================================\n\n\n");
		    /*moving up records in file after delete*/
		    for(i=0;i<deleteNum;i++)
		    {
		    	fseek(pointer1,(i)*sizeof(struct queueInfo),SEEK_SET);/*find point i in file*/
		    	fseek(pointer2,(i+1)*sizeof(struct queueInfo),SEEK_SET);/*find point (i+1) in file*/
		    	fread(&queue,sizeof(struct queueInfo),1,pointer2);/*read record in (i+1) slot of file*/
		    	queue.customerAuto=i+1;
		    	fwrite(&queue,sizeof(struct queueInfo),1,pointer1);/*write record in slot (i+1) of file in slot i*/
			}/*end for*/
			
		    printf("======= ORDER WITH ID %d HAS BEEN GRANTED =======\n\n\n",val);
			autocreateIndex(deleteNum-1);/*index decremented by 1 after and its new value written to file*/
		}/*end if*/
		fclose(pointer1);/*close pointer to file*/
		fclose(pointer2);/*close second pointer to file*/
	}/*end else*/
}//end dequeueCustomerOrder

//DELETES INDIVIDUAL CUSTOMERS
void deleteCustomerOrder(int identification,FILE*pointer1,FILE*pointer2)
{
	int i,val,deleted=0;
	FILE*pointer3;/*another pointer to queue file is created*/
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};
	struct customerInfo blankCustomer={0,0,0,"","","",0.0,0.0,0};
	struct queueInfo queue={0,0,"","","",0,0.0,0.0,0};
	struct queueInfo blankQueue={0,0,"","","",0,0.0,0.0,0};
	
	/*open pointer to customer file*/
	if((pointer1 = fopen("myfilecustomers", "rb+"))==NULL)
	{
		printf("Cannot open customer file \n");
		exit(1);
	}/*end if*/
	
	/*open pointer to queue file*/
	if((pointer2 = fopen("myfilequeue", "rb+"))==NULL)
	{
		printf("Cannot open queue file \n");
		exit(1);
	}/*end if*/
	/*open another pointer to queue file*/
	if((pointer3 = fopen("myfilequeue", "rb+"))==NULL)
	{
		printf("Cannot open queue file \n");
		exit(1);
	}/*end if*/
	
	fseek(pointer1,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
	fread(&customer,sizeof(struct customerInfo),1,pointer1);/*Read Mode*/
	
	if(customer.id==0)/*if record doesn't exist*/
	{
		printf("\n\n");
	    printf("============================================================\n\n");
		printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!              \n\n");
		printf("============================================================\n\n");
	}/*end if*/
	if(customer.id!=0)/*if record does exist*/
    {
		fseek(pointer1,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);
		fwrite(&blankCustomer,sizeof(struct customerInfo),1,pointer1);/*write blank record*/
    }/*end if*/
	
	fclose(pointer1);/*close pointer to customer file*/  
	
	/*call to function which returns index value from auto file*/
	int deleteNum=readAutoIndex();
	if(deleteNum<0)/*check for error situation*/
	{
		printf("FILE IS EMPTY. NO RECORDS PRESENT.\n");
	}
	else
	{	
		int pt=0;
		while((!feof(pointer2))&&(queue.customerAuto<=deleteNum))
		{
			fseek(pointer2,(pt)*sizeof(struct queueInfo),SEEK_SET);
			fread(&queue,sizeof(struct queueInfo),1,pointer2);
		    if(queue.id==identification)
		    {
				int dltPt=queue.customerAuto-1;
				val=queue.id;
				
				/*delete from queue file*/
				fseek(pointer2,(dltPt)*sizeof(struct queueInfo),SEEK_SET);
				fwrite(&blankQueue,sizeof(struct queueInfo),1,pointer1);
				
				printf("\n\n");
				printf("============================================================\n\n");
				printf("\t\t\t DELETE COMPLETE \t\t\t\n\n");
		    	printf("============================================================\n\n\n");
		    	/*moving up records in file after delete*/
		    	for(i=dltPt;i<deleteNum;i++)
			    {
			    	fseek(pointer2,(i)*sizeof(struct queueInfo),SEEK_SET);/*find point i in file*/
			    	fseek(pointer3,(i+1)*sizeof(struct queueInfo),SEEK_SET);/*find point (i+1) in file*/
			    	fread(&queue,sizeof(struct queueInfo),1,pointer3);/*read record in (i+1) slot of file*/
			    	queue.customerAuto=i+1;
			    	fwrite(&queue,sizeof(struct queueInfo),1,pointer2);/*write record in slot (i+1) of file in slot i*/
				}/*end for*/
				
				deleted++;
			}/*end if*/
			pt++;
		}/*end while*/
				
		if(deleted==0)
		{
			printf("\n\n");
	        printf("============================================================\n\n");
			printf("                DOES NOT EXIST IN QUEUE FILE                \n\n");
			printf("============================================================");
	    }/*end if*/
	    else
	    {
	    	printf("======= ORDER ASSOCIATED WITH ID %d HAS BEEN DELETED =======\n\n\n",val);
			autocreateIndex(deleteNum-1);/*index decremented by 1 after and its new value written to file*/
		}/*end else*/
	            
		fclose(pointer2);/*close pointer to queue file*/
		fclose(pointer3);/*close second pointer to queue file*/
	}/*end else*/
}//end deleteCustomerOrder

//READS AND DISPLAYS ORDERS FROM THE CUSTOMER FILE
void viewOrders(FILE*inDataFile2,struct customerInfo customer)
{
	int i;
	if((inDataFile2 = fopen("myfilecustomers", "rb+"))==NULL)
	{
        printf("Cannot open customer file \n");
        exit(1);
    }/*end if*/
	
	printf("============================================================\n\n");
	printf("                 DISPLAY ALL CUSTOMER ORDERS                \n\n");
	printf("============================================================\n\n\n\n");
	while(!feof(inDataFile2))
	{   
		fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
		if(customer.id!=0)
		{
			printf("============================================================\n\n\n\n");
			customerFormat(inDataFile2,customer);/*call to function customerFormat*/
		}/*end if*/				
	}/*end while*/	
   	printf("============================================================\n\n\n\n");
   	

	fclose(inDataFile2);
}//end viewOrders



//SEARCHES CUSTOMER FILE FOR A SPECIFIC ORDER
void findOrder(FILE*inDataFile2,struct customerInfo customer)
{
	int i,identification,found=0;
	if((inDataFile2 = fopen("myfilecustomers", "rb+"))==NULL)
	{
        printf("Cannot open customer file \n");
        exit(1);
    }/*end if*/
    
	printf("============================================================\n\n");
	printf("                     SEARCH FOR AN ORDER                    \n\n");
	printf("============================================================\n\n\n\n");				
	printf("Enter customer ID to search--->");
	scanf("%d",&identification);
	
	while(!feof(inDataFile2))
	{
		fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
	    /*Read Mode*/
	    if(customer.id==identification)
	    {
	    	printf("============================================================\n\n\n\n");
	        customerFormat(inDataFile2,customer);/*call to function customerFormat*/
	        printf("============================================================\n\n");
			found++;
		}/*end if*/
	}/*end while*/  
	
	if(found==0)
	{
	   	printf("\n\n");
	    printf("============================================================\n\n");
		printf("             RECORD HAS NO INFO         \n\n");
	   	printf("============================================================\n\n");
	}/*end if*/
	

	fclose(inDataFile2);
}//end findOrder

int mainMenu()//MAIN MENU FUNCTION
{
	int choice;
	
	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");
    printf("============================================================\n\n");
	printf("\t\tQuality Shoes\n\n");
    printf("============================================================\n\n");
	printf("============================================================\n\n");
	printf("\t\tMAIN MENU\n\n");
    printf("============================================================\n\n");
    
	printf("============================================================\n\n");
	printf("\tOPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");	
	printf("\t1\t\tCreate a new file\n\n");
	printf("\t2\t\tEnter the manager menu\n\n");
	printf("\t3\t\tEnter the customer menu\n\n");
	printf("\t4\t\tShoe Management\n\n");
	printf("\t5\t\tExit the program\n\n");
	
	printf("============================================================\n\n");
	printf("> > > > > > >Great Shoes, Great Price > > > > > > >\n\n");
    printf("============================================================\n\n");
    printf("\n\n");
    printf("\n\n");
    printf("Task=====>");
    
    scanf("%d",&choice);
    return choice;
}
    int MenuChoice()//MANAGER MENU
{
    int choice;
    
   	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");
	
	printf("============================================================\n\n         ");
	printf("\t\tManager MENU\n\n");
    printf("============================================================\n\n");
    
    
    printf("============================================================\n\n         ");
	printf("\tOPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");
    
	printf("\t1\t\tAdd Shoe Information\n\n");
	printf("\t2\t\tDisplay Shoe Information \n\n");
    printf("\t3\t\tUpdate Shoe Information\n\n ");
    printf("\t4\t\tDelete a record\n\n ");
 	printf("\t5\t\tDisplay client infomation\n\n");
 	printf("\t6\t\tDelete client information\n\n ");
	printf("\t7\t\tExit menu\n\n ");
   
    printf("============================================================\n\n");
	printf("> > > > > > >Great Shoes, Great Price > > > > > > >\n\n");
    printf("============================================================\n\n");


     printf("\n\n");
     printf("\n\n");
     printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}
int shoeManagementMenu()
{
	int choice;
	
    printf("\n\n");
	printf("============================================================\n\n");
	printf("                    SHOE MANAGEMENT                    \n\n");
	printf("============================================================\n\n\n\n");
	printf("============================================================\n\n\t");
	printf("OPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n\t ");
    printf("1 \t\t Display orders in queue\n\n\t ");
	printf("2 \t\t Display all recorded orders\n\n\t ");
	printf("3 \t\t Search for order\n\n\t ");
	printf("4 \t\t Display total sales\n\n\t ");
	printf("5 \t\t Delete customer order\n\n\t ");
	printf("6 \t\t Query number of records in queue file\n\n\t ");
	printf("7 \t\t Check if queue file is empty\n\n\t ");	
	printf("8 \t\t Exit menu\n\n\n");
	printf("Task->");
	scanf("%d",&choice);
	
	 while((choice<1)||(choice>8))/*accounting for invalid entry*/
	{
		printf("\n\n!!ERROR!!.\n");
		printf("Enter task again=====>");
		scanf("%d",&choice);
	}
    
    printf("\n\n");
    printf("\n\n");
    return choice;
}
int customerMenu()
{
	int choice;
	
    printf("\n\n");
	printf("============================================================\n\n");
	printf("                       CUSTOMER MENU                        \n\n");
	printf("============================================================\n\n\n\n");
	printf("============================================================\n\n\t");
	printf("OPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n\t ");
	printf("1 \t\t Make a shoe order\n\n\t ");
	printf("2 \t\t Collect your order\n\n\t ");
	printf("3 \t\t Exit menu\n\n\n");
	printf("Task---->");
	scanf("%d",&choice);
	
	while((choice<1)||(choice>3))
	{
		printf("\n\n!!ERROR 0007!! Invalid value.\n");
    	printf("Enter task again=====>");
    	scanf("%d",&choice);
	}/*end while*/
	
	printf("\n\n");
    printf("\n\n");
	return choice;
}//end customerMenu

void createFileStock()
{
	FILE*inDataFile1;//POINTER TO STOCK FILE
	int f;
	struct shoeInfo shoe={0,0,"","","",0.0};/*declaring structure shoeInfo*/

	if((inDataFile1 = fopen("myfileshoes","wb"))==NULL)
    {
        printf("Cannot open shoe file \n");
        exit(1);
    }/*end if*/
	
	/*creating 1000 blank records*/
	for (f=0;f<=1000;f++)
	{
	    fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
	} /*end for*/
	printf("\n\n");
	printf("             STOCK FILE SUCCESSFULLY CREATED                ******\n");
	
    fclose(inDataFile1);
}//end createFileStock


void createFile()//CREATE FILE FUNCTION
{
	FILE*inDataFile1;
	int f,val;
	struct shoeInfo shoe={0,0,"","","",0.0}; 
			   	
    if ((inDataFile1 = fopen("myfile5.txt", "wb"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
    else
    {
	    for(f=0;f<=100;f++)
    	{
    		fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
    	}   
   		printf("============================================================\n\n         ");
		printf("            NEW SHOE FILE CREATED                 \n\n");
		printf("============================================================\n\n         ");
		
    	fclose(inDataFile1);
    }
}
void createCustomerFile()//CREATE CUSTOMER FILE FUNCTION
{
	FILE*inDataFile2;
	int f,val; 
   	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};  
			   	
    if ((inDataFile2 = fopen("mycustomerfiles.txt", "wb"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
    else
    {
	    for(f=0;f<=100;f++)
    	{
    		fwrite(&customer,sizeof(struct customerInfo),1,inDataFile2);
    	}   
   		printf("============================================================\n\n         ");
		printf("            NEW CUSTOMER FILE CREATED                 \n\n");
		printf("============================================================\n\n         ");
		
    	fclose(inDataFile2);
    }
}
//CREATES A NEW QUEUE FILE
void createFileQueue()
{
	FILE*inDataFile3;//POINTER TO CUSTOMER FILE
	int f;
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};/*declaring structure customerInfo*/
	
	if((inDataFile3 = fopen("myfilequeue","wb"))==NULL)
	{
        printf("Cannot open queue file \n");
        exit(1);
    }/*end if*/
    
    autocreateIndex(-1);/*when file is FIRST created index is given a value of -1*/
	/*creating 10 blank records*/
	for (f=0;f<=length;f++)
	{
	    fwrite(&customer,sizeof(struct customerInfo),1,inDataFile3);
	} /*end for*/
	printf("\n\n");
	
	printf("=======              QUEUE SUCCESSFULLY FILE CREATED              =======\n");
    
    fclose(inDataFile3);	
}
void shoeManagement()
{
	FILE*inDataFile2;
	FILE*inDataFile3;
	int funcAns;
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};
		
	
	funcAns=shoeManagementMenu();

	while(funcAns!=8)
	{
		if(funcAns==1)//DISPLAY ORDERS IN QUEUE
		{
			struct queueInfo queue={0,0,"","","",0,0.0,0.0,0};
			int Auto=readAutoIndex();		
			if((inDataFile3 = fopen("myfilequeue", "rb+"))==NULL)
			{
				printf("Cannot open queue file \n");
				exit(1);
			}
			
			printf("=============================================================\n\n");
			printf("                    DISPLAY QUEUED ORDERS                    \n\n");
			printf("=============================================================\n\n\n\n");
			
			while((!feof(inDataFile3))&&(queue.customerAuto<=Auto))
			{   
				fread(&queue,sizeof(struct queueInfo),1,inDataFile3);
				if(queue.id!=0)
				{
					printf("============================================================\n\n\n\n");
					queueFormat(inDataFile3,queue);
				}			
			}
		   	printf("============================================================\n\n\n\n");

			fclose(inDataFile3);
		}//END OF DISPLAY ORDERS IN QUEUE
		
		if(funcAns==2)//DISPLAY ORDERS IN CUSTOMER FILE
		{
			viewOrders(inDataFile2,customer);
		}//END OF DISPLAY ORDERS IN CUSTOMER FILE
		
		if(funcAns==3)//SEARCH FOR CUSTOMER ORDER
		{		  	      
			findOrder(inDataFile2,customer);
		}//END OF SEARCH FOR CUSTOMER ORDER		
		
		if(funcAns==4)//DISPLAY TOTAL SALES
		{	
		    float totalSales=0;	
				
			if((inDataFile2 = fopen("myfilecustomers", "rb+"))==NULL)
			{
		        printf("Cannot open customer file \n");
		        exit(1);
		    }/*end if*/
		    
			while(!feof(inDataFile2))
			{
				fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
				if(customer.id!=0)
				{
					totalSales=totalSales+customer.totalCost;
				}/*end if*/   
	    	}/*end while*/
	    	
		
			printf("                  TOTAL SALES========>$%.2f                  \n",totalSales);

			fclose(inDataFile2);
		}//END OF DISPLAY TOTAL SALES
				
		if(funcAns==5)//DELETE AN ORDER
		{
			int identification;
			printf("============================================================\n\n");
			printf("                       DELETE AN ORDER                      \n\n");
			printf("============================================================\n\n\n\n");
			printf("Enter customer id to delete an order.\n");
			printf(" Will delete record in both customer and queue files.(-1 to cancel)--->");
	    	scanf("%d",&identification);
	    	if(identification!=-1)
			{
				/*delete record in customer & queue files*/
				deleteCustomerOrder(identification,inDataFile2,inDataFile3);	
			}/*end if*/
			else
			{
				printf("\n\nDelete cancelled.\n\n\n");
			}/*end else*/
			
		}//END OF DELETE AN ORDER
				
		if(funcAns==6)//DETERMINE NUMBER OF RECORDS IN QUEUE FILE
		{
			printf("============================================================\n\n");
			printf("                   QUERY NUMBER OF RECORD                   \n\n");
			printf("============================================================\n\n\n\n");
			int number=size();/*call to function size*/
			printf("============================================================\n\n");
			printf("            Number of records in the file---->%d\n\n",number);
			printf("============================================================\n\n\n\n");

		}//END OF DETERMINE NUMBER OF RECORDS IN QUEUE FILE		
		
		if(funcAns==7)//CHECK IF QUEUE FILE EMPTY
		{
			printf("=============================================================\n\n");
			printf("                    DETEMINING IF THE QUEUE FILE EMPTY                   \n\n");
			printf("=============================================================\n\n\n\n");
			
			if(isEmpty())/*call to function isEmpty*/
			{
				printf("=============================================================\n\n");
				printf("==================     FILE IS EMPTY     ====================\n\n");
				printf("=============================================================\n\n");
			}/*end if*/
			else
			{
				printf("=============================================================\n\n");
				printf("==================  ! FILE IS NOT EMPTY   !====================\n\n");
				printf("=============================================================\n\n\n\n");
			}/*end else*/

		}//END OF CHECK IF QUEUE FILE EMPTY
						
		funcAns=shoeManagementMenu();			
	}/*end while*/
				
	if(funcAns==8)
	{
		printf("\n\n");
	   
	}/*end if*/   
}//end shoeManagement


//CUSTOMER OPTIONS
void customerFunc()
{
	FILE*inDataFile1;//POINTER TO STOCK FILE
	FILE*inDataFile2;//POINTER TO CUSTOMER FILE
	FILE*inDataFile3;//POINTER TO QUEUE FILE
	int funcAns,val,identification,num;
	char answer[4];
	float cost;
	float shoeCostATP; /*shows shoe cost at time of purchase*/
	
	struct shoeInfo shoe={0,0,"","","",0.0};
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};
	struct queueInfo queue={0,0,"","","",0,0.0,0.0,0};
	
	funcAns=customerMenu();/*call to function customerMenu*/

	while(funcAns!=3)
	{
		if(funcAns==1)//MAKE AN ORDER
		{
			if((inDataFile1 = fopen("myfileshoes", "rb+"))==NULL)
			{
				printf("Cannot open shoe file \n");
				exit(1);                   
			}/*end if*/
			if((inDataFile2 = fopen("myfilecustomers", "rb+"))==NULL)
			{
				printf("Cannot open customer file \n");
				exit(1);
			}/*end if*/
			if((inDataFile3 = fopen("myfilequeue", "rb+"))==NULL)
			{
				printf("Cannot open queue file \n");
				exit(1);
			}/*end if*/
			
			customer.totalCost=0;
			customer.numOrders=0;
			queue.totalCost=0;
			queue.numOrders=0;
			queue.customerAuto=readAutoIndex()+2;/*auto generate customer pos. in queue*/
			
			printf("\n\n");
		
			printf("=====           MAKE AN ORDER              =======\n");
	
			printf("Enter customer's order registration number (4 DIGITS MAX)---->");
			scanf("%d",&val);
		
			while((val<1)||(val>99))/*check for error*/
			{
				printf("!!ERROR 0036!! Invalid order number.\n");
				printf("Please re-enter order number---->");
				scanf("%d",&val);
			}/*end while*/
			while(!feof(inDataFile2))/*check if ID already taken*/
			{
				fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
				while(customer.id==val)
				{
					printf("!!ERROR 0038!! Order number already taken.\n");
					printf("Please re-enter order number---->");
					scanf("%d",&val);
				}/*end while*/
			}/*end while*/
			fclose(inDataFile2);/*temporarily close customer file*/
			inDataFile2=fopen("myfilecustomers", "rb+");/*reopen file*/
			
			customer.id=val;/*write val to customer.ID*/
			
			printf("\nEnter your first name---->");
			scanf("%s",customer.first_name);
			printf("\nEnter your last name---->");
			scanf("%s",customer.last_name);
			
			/*copy to struct queueInfo*/
			queue.id=customer.id;/*copy to queue*/
			strcpy(queue.first_name,customer.first_name);
			strcpy(queue.first_name,customer.last_name);
			
			printf("\n\n");			    
			printf("\n\n");
			printf("Enter shoe ID (-1 to terminate)--->");
			scanf("%d",&identification);
				
			while(identification!=-1)
			{
				fseek(inDataFile1,(identification-1)*sizeof(struct shoeInfo),SEEK_SET);
				fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
				/*Read Mode*/ 
				if(shoe.shoeId==0)
				{
					printf("\n\n");
					printf("============================================================\n\n");
					printf("              !!!!!!SHOE DOES NOT EXIST!!!!!!               \n\n");
					printf("============================================================");
				}/*end if*/	
					
				if(shoe.shoeId!=0)
				{   
					if(customer.numOrders>0)
					{
						printf("\n\n");
						printf("************************************************************\n\n");
						printf("************************************************************\n\n");
					}
					printf("Shoe requested---->%s\n\n",shoe.name_shoe);	    			    
					printf("Enter the desired amount of the shoe(s)---->");
					scanf("%d",&num);
					
					cost=shoe.Priceshoe*num;
					printf("\nCost is $%.2f. Is this okay? (yes or no)---->",cost);
					scanf("%s",&answer);
					
					while((stricmp(answer,"yes")!=0)&&(stricmp(answer,"no")!=0))
					{
						printf("!!ERROR 0007!! Invalid answer.\n");
						printf("Enter answer again (yes or no)---->");
						scanf("%s",&answer);
					}/*end while*/
				
					if(stricmp(answer,"yes")==0)
					{
						if(num>shoe.shoeAmount)
						{
							printf("\n\n");
							printf("!!ERROR 0364!! NOT ENOUGH STOCK!\n\n");
						}/*end if*/
						else
						{
							shoe.shoeAmount=shoe.shoeAmount-num;
							fseek(inDataFile1,(shoe.shoeId-1)*sizeof(struct shoeInfo),SEEK_SET);
							fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
							fclose(inDataFile1);
							inDataFile1=fopen ("myfileshoes", "rb+");/*reopen file*/
							
							/*add to customerInfo structure*/
							
							customer.quantity[customer.numOrders]=num;
							customer.cost[customer.numOrders]=cost;
							customer.totalCost=customer.totalCost+cost;
							customer.numOrders++;
							
							/*add to queueInfo structure*/
							strcpy(queue.shoe[queue.numOrders],shoe.name_shoe);
							queue.quantity[queue.numOrders]=num;
							queue.cost[queue.numOrders]=cost;
							queue.totalCost=queue.totalCost+cost;
							queue.numOrders++;
							
							printf("\n\n");
							printf("SUCCESS!! PURCHASE HAS BEEN MADE!!\n");
						}/*end else*/
					}/*end if*/
					
					else
					if(stricmp(answer,"no")==0)
					{
						printf("\n\n");
						printf("Okay. No purchase was made.\n");
					}/*end else*/
				}/*end if*/
				
				printf("\n\n");
				printf("Enter shoe ID (-1 to terminate)--->");
				scanf("%d",&identification);
					
			}/*end while*/
			
			if(customer.numOrders>0)/*only writes transaction to file if purchase was made*/
			{
				saveCustomerOrder(inDataFile3,queue);/*call to function saveCustomerOrder*/
				fseek(inDataFile2,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);/*seeks position to write in customer file*/
				fwrite(&customer,sizeof(struct customerInfo),1,inDataFile2);/*write customer order to customer file*/
			}/*end if*/
				
			printf("\n\n");
			printf("***********************************\n");
			printf("***END OF MAKE AN ORDER FUNCTION***\n");
			printf("***********************************\n\n\n");
			
			fclose(inDataFile1);
			fclose(inDataFile2);
			fclose(inDataFile3);
		}//END OF MAKE AN ORDER
		
		else
		if(funcAns==2)//RECEIVE ORDER
		{
			if((inDataFile3 = fopen("myfilequeue", "rb+"))==NULL)
			{
		        printf("Cannot open queue file \n");
		        exit(1);
		    }/*end if*/
			printf("\n\n");
			printf("***********            RECEIVE ORDER              ***********\n");
			
			if(isEmpty())
			{
				printf("QUEUE IS EMPTY. NO RECORDS PRESENT.\n");
			}
			else
			{
				fseek(inDataFile3,(0)*sizeof(struct queueInfo),SEEK_SET);
				fread(&queue,sizeof(struct queueInfo),1,inDataFile3);
				printf("============================================================\n\n\n\n");
				queueFormat(inDataFile3,queue);/*call to function queueFormat*/
		        printf("============================================================\n\n");
		        
		        dequeueCustomerOrder(inDataFile3);/*call to function dequeueCustomerOrder*/
			}/*end else*/
			
	        fclose(inDataFile3);
	        printf("\n\n");
		}//END OF RECEIVE ORDER
		
		funcAns=customerMenu();/*call to function shoeMenu*/
	}/*end while*/
	
	if(funcAns==3)
	{

	}/*end if*/
}//end customerFunc


int secondMenu()//SHOE SEARCH FUNCTION
{
	int choice;
    
   	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");

	printf("============================================================\n\n         ");
	printf("\t\tShoe SEARCH\n\n");
    printf("============================================================\n\n");
    
    printf("============================================================\n\n         ");
	printf("OPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");
    
	printf("\t1\t\tSearch for Shoe by name\n\n");
	printf("\t2\t\tSearch for Shoe by Brand\n\n");
	printf("\t3\t\tSearch for Shoe by price\n\n");
	printf("\t5\t\tExit menu\n\n ");

	printf("============================================================\n\n");
	printf("> > > > > > >Great Shoes, Great Price > > > > > > >\n\n");
    printf("============================================================\n\n");;

    printf("\n\n");
    printf("\n\n");
    printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}  

void ShoeRecords()// RECORDS FUNCTION
{
	FILE*inDataFile1;
	struct shoeInfo shoe={0,0,"","","",0.0}; 
    if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");                               
    }
    else
    {
	    printf("============================================================\n\n");
        printf("\t\t\tVIEW SHOE RECORDS                 \n\n");
        printf("============================================================\n\n");

	    /*read and display every line in the file*/
	
        while(!feof(inDataFile1))
        {   
            fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
            if(shoe.shoeId!=0)
            {
				printf("\tID---->%d\n\tNAME---->%s\n\tSHOE BRAND------>%s\n\tSTOCK AMOUNT----->%d\n\tPRICE---->%3.2f",shoe.shoeId,shoe.name_shoe,shoe.shoe_brand,shoe.shoeAmount,shoe.Priceshoe);
                printf("\n\n\n");
                printf("============================================================\n\n");
            }  
        }
    }
    fclose(inDataFile1);
} 
int shoeUpdateChoices()//Shoe UPDATE OPTIONS FUNCTION
{
	int choice;
	
	printf("What would you like to update?\n");
           	
    printf("1. The Price of the shoe\n");
    printf("2. The Brand of shoe\n");
    printf("3. The name of the shoe\n");
           	
	scanf("%d",&choice);
	return choice;
    
}
int BrandChoice()
{
	int num;
	
	printf("Enter the number correspondent with the shoe brand---->\n");
	
	printf("1. NIKES\n");
	printf("2. JORDANS\n");
	printf("3. ADIDAS\n");
	scanf("%d",&num);
	return num;
}
void ShoeUpdate()//UPDATE shoe PRICE
{
	FILE*inDataFile1;
	int identification,choice,num;
	float amount;
	char name[string_length];
	
	amount=0;
	struct shoeInfo shoe={0,0,"","","",0.0};      
    if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/
    else
	{
		printf("============================================================\n\n");
        printf("\t\t\tUPDATE SHOE INFORMATION             \n\n");
        printf("============================================================\n\n");
		
		printf("\tID 		SHOE\n\n");
		while(!feof(inDataFile1))
		{
			fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
			if(shoe.shoeId!=0)
			{
				printf("\t%d\t\t%s\n",shoe.shoeId,shoe.name_shoe);
			}
		}
        printf("Enter shoe Id to update(1 to 100)--->");
        scanf("%d",&identification);
        
        fseek(inDataFile1,(identification-1)*sizeof(struct shoeInfo),SEEK_SET);
        fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
        /*Read Mode*/ 
        if(shoe.shoeId==0)
        {
            printf("============================================================\n\n");
			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!                 \n\n");
    		printf("============================================================\n\n\n\n\n");
        }/*end if*/
        if(shoe.shoeId!=0)
        {
            printf("\tID---->%d\n\tNAME---->%s\n\tSHOE BRAND------>%s\n\tSTOCK AMOUNT----->%d\n\tPRICE---->%3.2f",shoe.shoeId,shoe.name_shoe,shoe.shoe_brand,shoe.shoeAmount,shoe.Priceshoe);
   	        printf("\n\n");
           	
           	choice=shoeUpdateChoices();
           	printf("\n\n");
           	
           	while((choice>3)||(choice<1))
           	{
           		printf("That is not one of the options listed\n");
				printf("Please try again\n\n");
           	
	           	choice=shoeUpdateChoices();	
			}
			
			if(choice==1)
			{
	   	        printf("Enter the increase(+) or decrease(-)--------->");
	            scanf("%f",&amount);
	            printf("\n\n");
	            
	            shoe.Priceshoe=shoe.Priceshoe+amount;
	      		
	      		printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED SHOE PRICE                \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tNAME---->%s\n\tshoe PRICE---->%.2f",shoe.name_shoe,shoe.Priceshoe);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
			if(choice==2)
			{
				num=BrandChoice();//CALL TO FUNCTION CONSOLE LIST
	      		printf("\n");
	      		
	      		while((num>3)||(num<1))	
				{
					printf("That is not a valid option\n");
					printf("Please try again\n");
					
					num=BrandChoice();//CALL TO FUNCTION CONSOLE LIST
			      	printf("\n");
				}
	      		if(num==1)
	      		{
	      			strcpy(shoe.shoe_brand,"NIKE");	
				}
				if(num==2)
	      		{
	      			strcpy(shoe.shoe_brand,"JORDANS");	
				}
				if(num==3)
	      		{
	      			strcpy(shoe.shoe_brand,"ADIDAS");
				}	

				printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED BRAND            \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tNAME---->%s\n\tCBRAND---->%s",shoe.name_shoe,shoe.shoe_brand);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
			if(choice==3)
			{
				fflush(stdin);
				
				printf("Enter the new name of the shoe\n");
				scanf("%[^\n]%*c",&name);
				
				strcpy(shoe.name_shoe,name);
				printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED SHOE NAME           \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tID---->%d\n\t SHOE NAME---->%s",shoe.shoeId,shoe.name_shoe);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
   	  		
   	        fseek(inDataFile1,(shoe.shoeId-1)*sizeof(struct shoeInfo),SEEK_SET);
            fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
            fclose(inDataFile1);    
    	}   /*end if*/  
	} /*end else*/
}
void shoeDelete()//shoe DELETE FUNCTION
{
	FILE*inDataFile1;
	
	int identification;
	struct shoeInfo shoe={0,0,"","","",0.0}; 
    struct shoeInfo blankShoe={0,0,"","","",0.0}; 
     
	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
            
	printf("============================================================\n\n");
	printf("\t\t\t DELETE RECORDS                 \n\n");
	printf("============================================================\n\n"); 
    
	printf("\tID 		SHOE\n\n");
	while(!feof(inDataFile1))
	{
		fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
		if(shoe.shoeId!=0)
		{
			printf("\t%d\t\t%s\n\n",shoe.shoeId,shoe.name_shoe);
		}
	}                  
    printf("Enter the Id of the shoe to delete(1 to 100)--->");
    scanf("%d",&identification);         
    printf("\n\n");
    
    fseek(inDataFile1,(identification-1)*sizeof(struct shoeInfo),SEEK_SET);
    fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
    /*Read Mode*/ 
    if(shoe.shoeId==0)
    {
	    printf("============================================================\n\n");
		printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!                 \n\n");
    	printf("============================================================\n\n\n\n\n");
    }
    if(shoe.shoeId!=0)
    {
        fseek(inDataFile1,(shoe.shoeId-1)*sizeof(struct shoeInfo),SEEK_SET);
           
        fwrite(&blankShoe,sizeof(struct shoeInfo),1,inDataFile1);
        printf("============================================================\n\n");
		printf("\t\t\t DELETE COMPLETE                \n\n");
    	printf("============================================================\n\n"); 
    }            
    fclose(inDataFile1);	
}
void clientDelete()//CLIENT DELETE FUNCTION
{
	FILE*inDataFile2;
	
	int identification;
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0}; 
    struct customerInfo blankCustomer={0,0,0,"","","",0.0,0.0,0}; 
     
	if ((inDataFile2 = fopen("mycustomerfiles.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
            
	printf("============================================================\n\n");
	printf("\t\t\t DELETE RECORDS                 \n\n");
	printf("============================================================\n\n"); 
    
	printf("\tID 		Customer\n\n");
	while(!feof(inDataFile2))
	{
		fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
		if(customer.id!=0)
		{
			printf("\t%d\t\t%s\n\n",customer.id,customer.first_name);
		}
	}                  
    printf("Enter the Id of the records to delete(1 to 100)--->");
    scanf("%d",&identification);         
    printf("\n\n");
    
    fseek(inDataFile2,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
    fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
    /*Read Mode*/ 
    if(customer.id==0)
    {
	    printf("============================================================\n\n");
		printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!                 \n\n");
    	printf("============================================================\n\n\n\n\n");
    }
    if(customer.id!=0)
    {
        fseek(inDataFile2,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);
           
        fwrite(&blankCustomer,sizeof(struct customerInfo),1,inDataFile2);
        printf("============================================================\n\n");
		printf("\t\t\t DELETE COMPLETE                \n\n");
    	printf("============================================================\n\n"); 
    }            
    fclose(inDataFile2);	
}
void ManagerMenu()//EMPLOYEE MENU FUNCTION
{
	FILE*inDataFile1;
	FILE*inDataFile2;
	
	int result3,f,identification,num,i;

	struct shoeInfo shoe={0,0,"","","",0.0}; 
 	result3=MenuChoice();
 	while(result3!=7)
 	{
 		if(result3==1)
 		{
        	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
            {
            	printf("Cannot open file \n");
            	exit(1);
           	}
			
			printf("============================================================\n\n");
			printf("\t\t\t ADD SHOE RECORDS               \n\n");
    		printf("============================================================\n\n"); 
              
            printf("Enter the shoe Id(between 1 and 100)--->");
            scanf("%d",&shoe.shoeId);
            
            fflush(stdin);//removes new line
            	
            printf("Enter the name of the shoe--->");
            scanf("%[^\n]%*c",&shoe.name_shoe);
			
			num=BrandChoice();
      		printf("\n");
      		
      		while((num>3)||(num<1))	
			{
				printf("That is not a valid option\n");
				printf("Please try again\n");
				
				num=BrandChoice();
		      	printf("\n");
			}
      		if(num==1)
      		{
      			strcpy(shoe.shoe_brand,"NIKES");	
			}
			if(num==2)
      		{
      			strcpy(shoe.shoe_brand,"JORDANS");	
			}
			if(num==3)
      		{
      			strcpy(shoe.shoe_brand,"ADIDAS");	
			}
           	    	
            printf("Enter price of the shoe[Between 1 and 450]---->");
            scanf("%f",&shoe.Priceshoe);  
            
			while((shoe.Priceshoe>450)||(shoe.Priceshoe<1))
			{
				printf("I think you may have entered an incorrect price\n");
				printf("Please try again\n");
				printf("Enter price of the shoe---->");
            	scanf("%f",&shoe.Priceshoe); 
			}
			
            printf("Enter the amount of the shoe in stock---->");
            scanf("%d",&shoe.shoeAmount);
         	
         	fseek(inDataFile1,(shoe.shoeId-1)*sizeof(struct shoeInfo),SEEK_SET);
         	fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
         	fclose(inDataFile1);
	        result3=MenuChoice();/*call to function MenuChoice*/ 
		}
		if(result3==2)
		{
			ShoeRecords();
    		result3=MenuChoice();/*call to function MenuChoice*/		
		}
		if(result3==3)
		{
			ShoeUpdate();
    	  	result3=MenuChoice();/*call to function MenuChoice*/	
		}
		if(result3==4)
		{
			shoeDelete();
          	result3=MenuChoice();/*call to function MenuChoice*/
		}
		if(result3==5)
		{
			struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};  
			 
           	if((inDataFile2= fopen("mycustomerfiles.txt","rb+"))==NULL)
            {
                printf("Cannot open file \n");                               
           	}
            else
            {
	        	printf("============================================================\n\n");
                printf("\n\t\t\tVIEW CUSTOMER RECORDS                 \n\n");
                printf("============================================================\n\n");
			
			    /*read and display every line in the file*/
			
				while(!feof(inDataFile2))
				{
					fread(&customer,sizeof(struct customerInfo),1,inDataFile2);
					if(customer.id!=0)
					{
						num=1;
						printf("\tID---->%d\n",customer.id);
						printf("\tFULL NAME---->%s	%s\n",customer.first_name,customer.last_name);
						printf("\tNUMBER OF ORDERS---->%d\n",customer.numOrders);
						printf("\tTOTAL AMOUNT PAID---->%.2f\n\n",customer.totalAmountDue);
						
						for(i=0;i<customer.numOrders;i++)
						{
							if(customer.quantity[i]<2)
							{
								printf("\tORDER %d----->1 unit of %s\n",num,customer.purchase[i]);
							}
							if(customer.quantity[i]>=2)
							{
								printf("\tORDER %d----->%d units of %s\n",num,customer.quantity[i],customer.purchase[i]);
							}
							num+=1;
						}
						printf("\n\n\n");
                		printf("============================================================\n\n");
					}
				}
	            		/*read and display every line in the file*/
            }
        	fclose(inDataFile2);
    		result3=MenuChoice();/*call to function MenuChoice*/
		}
		if(result3==6)
		{
			clientDelete();
			result3=MenuChoice();
		}
		if((result3<1)||(result3>7))
		{
			printf("============================================================\n\n");
			printf("           !!!!!!TOO BAD !!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		
			result3=MenuChoice();
		}	
	}
}
void custMenu()//CUSTOMER MENU FUNCTION
{
	FILE*inDataFile1;
	FILE*inDataFile2;
	
	int result4,amount,found,result2,id,num;
	float price,cost,price2,temp;
	char name[string_length],confirm2[string_length],confirm[string_length];
	
	found=0;
	
	result4=customerMenu();
	struct customerInfo customer={0,0,0,"","","",0.0,0.0,0};  
	struct shoeInfo shoe={0,0,"","","",0.0}; 
	
	customer.numOrders=0;
			
	while(result4!=3)
	{
		if(result4==1)
		{
			if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    		{
        		printf("Cannot open file \n");
        		exit(1);
        	}
        	
        	if((inDataFile2=fopen("mycustomerfiles.txt","rb+"))==NULL)
        	{	printf("Cannot open customer file \n");
        		exit(1);
        	}
        	
        	
			printf("============================================================\n\n");
            printf("\n\t\t\tSHOE PURCHASE!              \n\n");
            printf("============================================================\n\n");

			printf("Enter the customer's id--->");
			scanf("%d",&customer.id);
			printf("\n");
			
			printf("Enter the customer's first name--->");
			scanf("%s",&customer.first_name);
			printf("\n");
					
			printf("Enter the customer's last name--->");
			scanf("%s",&customer.last_name);
			printf("\n");
			
			printf("Enter the customer's age--->");
			scanf("%d",&customer.age);	
			printf("\n");
			
			printf("ID 	PRICE	STOCK	SHOE\n\n");
			
			while(!feof(inDataFile1))
			{
				fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
				if(shoe.shoeId!=0)
				{
					printf("%d\t%.2f\t%d\t%s\n\n",shoe.shoeId,shoe.Priceshoe,shoe.shoeAmount,shoe.name_shoe);
				}
			}
			
			printf("Enter the ID of the shoe the buyer wants to purchase(-1 to terminate order)\n");
			scanf("%d",&id);
			
			while(id!=-1)
			{
				printf("=========================================================================\n\n");
           		printf("\n\t\t\tCONTINUING WITH YOUR PURCHASE!!!!!               \n\n");
            	printf("=========================================================================\n\n");
				
				fseek(inDataFile1,(id-1)*sizeof(struct shoeInfo),SEEK_SET);
				fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
				
				if(shoe.shoeId==0)
				{
					printf("============================================================\n\n");
           			printf("\n\t\t\tSHOE DOES NOT EXIST!!!!!               \n\n");
            		printf("============================================================\n\n");
				}
				if(shoe.shoeId!=0)
				{
					printf("Name of the shoe requested---->%s\n\n",shoe.name_shoe);
					
					printf("Enter how many units of %s you would like to purchase--->",shoe.name_shoe);
					scanf("%d",&num);
					
					cost=shoe.Priceshoe*num;
					
					printf("Amount due--->%.2f\n",cost);
					
					if(num>shoe.shoeAmount)
					{
						printf("Unfortunately there are not enough units in stock\n");
					}
					else
					{
						shoe.shoeAmount=shoe.shoeAmount-num;
					}
					fseek(inDataFile1,(shoe.shoeId-1)*sizeof(struct shoeInfo),SEEK_SET);
					fwrite(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
					
					strcpy(customer.purchase[customer.numOrders],shoe.name_shoe);
					
					customer.quantity[customer.numOrders]=num;
					customer.amountDue[customer.numOrders]=cost;
					customer.totalAmountDue+=customer.amountDue[customer.numOrders];
					customer.numOrders+=1;
				}
				fclose(inDataFile1);
				inDataFile1=fopen("myfile5.txt","rb+");
				
				printf("ID 	PRICE	STOCK	SHOE\n\n");
			
				while(!feof(inDataFile1))
				{
					fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
					if(shoe.shoeId!=0)
					{
						printf("%d\t%.2f\t%d\t%s\n\n",shoe.shoeId,shoe.Priceshoe,shoe.shoeAmount,shoe.name_shoe);
					}
				}
				
				printf("Enter the ID of the shoe the buyer wants to purchase(-1 to terminate order)\n");
				scanf("%d",&id);
			}
			
			fseek(inDataFile2,(customer.id-1)*sizeof(struct customerInfo),SEEK_SET);
			fwrite(&customer,sizeof(struct customerInfo),1,inDataFile2);
			
			fclose(inDataFile1);
			fclose(inDataFile2);
					
	       	result4=customerMenu();
	    }
	    if(result4==2)
	    {
	       	struct shoeInfo shoe={0,0,"","","",0.0}; 
        
        	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
        	{
                printf("Cannot open file \n");
                exit(1);
        	}/*end if*/
       		else
			{
				result2=secondMenu();
            	struct shoeInfo shoe={0,0,"","","",0.0};
				 
            	while(result2!=5)
            	{
            		if(result2==1)
            		{
            			printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY SHOE NAME                \n\n");
                		printf("============================================================\n\n");
						
						fflush(stdin);//removes new line
            
            			printf("Enter the name of the shoe you wish to search for--->");
            			scanf("%[^\n]%*c",&name);
            		
						if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
            			{
                			printf("Cannot open file\n");                               
           				}
            			else
        			    {	
							found=0;            		
                			while(!feof(inDataFile1))
                			{   
                    			fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
            					if(stricmp(name,shoe.name_shoe)==0)
            					{
            						found+=1;
            						printf("\n");
            						printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",shoe.shoeId,shoe.name_shoe,shoe.shoe_brand,shoe.shoeAmount,shoe.Priceshoe);
                    	   			printf("\n\n\n");
                        		}
							}
							printf("============================================================\n\n");
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO SHOES BY THAT NAME!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
							
						}
						fclose(inDataFile1);
            			result2=secondMenu();
            		}
            		if(result2==2)
            		{
            			printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY CONSOLE                \n\n");
                		printf("============================================================\n\n");

						fflush(stdin);
            			printf("Enter the Brand of Shoe you wish to search for--->\n");
		           		
						printf("1. NIKES\n");
						printf("2. JORDANS\n");
						printf("3. ADIDAS\n");

						scanf("%[^\n]%*c",&name);
		           		
		           		if((stricmp(name,"NIKES")!=0)&&(stricmp(name,"JORDANS")!=0)&&(stricmp(name,"ADIDAS")!=0))
						{
							while((stricmp(name,"NIKES")!=0)&&(stricmp(name,"JORDANS")!=0)&&(stricmp(name,"ADIDAS")!=0))
							{
								printf("\n\n");
								printf("That is not one of the brands of shoes listed\n");
								printf("Please try again\n");
									
								fflush(stdin);
								
						        printf("Enter the shoe name of the brand you wish to search for--->\n");
						        printf("1. NIKES\n");
						        printf("2. JORDANS\n");
						    	printf("3. ADIDAS\n");
						    	
						        scanf("%[^\n]%*c",&name);
						      	printf("\n");
						    }
						}	
							
		           		if ((inDataFile1 = fopen("myfile5.txt","rb+"))==NULL)
		           		{
		               		printf("Cannot open file\n");                               
		          		}
		          		else
		       			{	
							found=0;
									            		
		               		while(!feof(inDataFile1))
		               		{   
		                   		fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
		           				if(stricmp(name,shoe.shoe_brand)==0)
		           				{
		            				found+=1;
		           					printf("\n");
		            				printf("============================================================\n\n");
		            				printf("\tID---->%d\n\tNAME---->%s\n\tBRAND----->%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",shoe.shoeId,shoe.name_shoe,shoe.shoe_brand,shoe.shoeAmount,shoe.Priceshoe);
		                   	    	printf("\n\n\n");
								}
							}
							printf("============================================================\n\n");
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO SHOES BY THAT BRAND!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
						}
						fclose(inDataFile1);
		            	result2=secondMenu();
					}
		           	if(result2==3)
		           	{
		           		printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY PRICE                \n\n");
                		printf("============================================================\n\n");
						
		           		printf("Enter the price range of the shoe that you wish to search for[Between 1 and 450] --->");
		           		scanf("%f %f",&price,&price2); 
			            
			            if(price>price2)
			            {
			            	temp=price;
			            	price=price2;
			            	price2=temp;
						}
						
						while((price>450)||(price<1))
						{
							printf("You have entered an incorrect price\n");
							printf("Please try again!\n");
							
							printf("Enter the price range of the shoe that you wish to search for[Between 1 and 450]---->");
			            	scanf("%f %f",&price,&price2); 
						}	
		           		if ((inDataFile1 = fopen("myfile5.txt","rb+"))==NULL)
		            	{
		               		printf("Cannot open file\n");                               
		          		}
		           		else
		       			{	 
							found=0;           		
		                	while(!feof(inDataFile1))
		               		{   
		                   		fread(&shoe,sizeof(struct shoeInfo),1,inDataFile1);
		           				if((shoe.Priceshoe>price)&&(shoe.Priceshoe<price2))
		           				{
		            				found+=1;
		           					printf("\n");
		           					printf("============================================================\n\n");
		           					printf("\tID---->%d\n\tNAME---->%s\n\tBRAND----->%s\n\tNUMBER OF UNITS----->%d\n\tPRICE---->%3.2f",shoe.shoeId,shoe.name_shoe,shoe.shoe_brand,shoe.shoeAmount,shoe.Priceshoe);
		                   	    	printf("\n\n\n");
		                    	    printf("============================================================\n\n");
								}
							}
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO SHOES AT THAT PRICE!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
						}
		            	result2=secondMenu();
					}
					
					if((result2<1)||(result2>5))
					{
						printf("============================================================\n\n");
						printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
						printf("============================================================\n\n\n\n\n");			
						
						result2=secondMenu();
					}	
				}
		    	result4=customerMenu();/*call to function MenuChoice*/	
			}
		}
		if((result4<1)||(result4>3))
		{
			printf("============================================================\n\n");
			printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		
			result4=customerMenu();
		}
	}	
}
main()
{
	FILE*inDataFile1;//POINTER TO FILE
    int result,f,fault,left,val;
	char search[string_length];
	char password[10];
	
	fault=1;
	left=2;
	
	printf("Please Enter the password\n");
	scanf("%s",&password);
	
	if(strcmp(password,"retro")!=0)
	{
		while(strcmp(password,"retro")!=0)
		{
			printf("INVALID PASSWORD\n");
			if(left==1)
			{
				printf("You have %d chance to enter the correct password\n",left);
				scanf("%s",&password);
			}
			else
			{
				printf("You have %d chances to enter the correct password\n",left);
				scanf("%s",&password);
			}
			left=left-1;
			fault+=1;
			if((fault==3)&&(stricmp(password,"retro")!=0))
			{
				exit(0);
			}
		}
	}
	if(strcmp(password,"retro")==0)
	{
		printf("Welcome to Quality Shoes\n");
		
		result=mainMenu();
	}
	
	while(result!=5)
   	{	
    	if(result==1)
    	{
    		printf("Do you want to create a shoe file or a customer file\n");
    		printf("1. Shoe File\n");
    		printf("2. Customer File\n");
			scanf("%d",&val);
			
			while((val<1)||(val>2))
            {
            	printf("That is not a valid option\n");
            	printf("Do you want to create a shoe file or a customer file\n");
    			printf("1. Shoe File\n");
    			printf("2. Customer File\n");
				scanf("%d",&val);
			}
			if(val==1)
			{
            	createFile();
            }
            if(val==2)
            {
            	createCustomerFile();
			}
		}
		if(result==2)//PROMPT USER FOR INFO TO FILL RECORD
  		{
            ManagerMenu();
		}	
		if(result==3)
		{
			custMenu();		
		}
		if(result==4)
		{
			shoeManagement();
		}
		if((result>4)||(result<1))
		{
			printf("============================================================\n\n");
			printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		}
		result=mainMenu();	
	}	 
}


