#include<stdio.h>
#include<errno.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>
#define string_length 30
#define LENGTH 100

struct gameInfo
{            
	int idGame,gameAmount;
	char game_name[string_length];
	char console_name[string_length];
    char gameType[string_length];
    float gamePrice;
};

struct buyerInfo
{    
	int buyerAuto;
	int id,age,numOrders;
	char first_name[string_length ];
	char last_name[string_length ];
	char purchase[10][string_length];
	float totalAmountDue,amountDue[10];
	int quant[10];
};

int autocreateIndex(int autoGeneratedIndex)
{
  	FILE*fileIndex;
    int index;
    if ((fileIndex = fopen("auto", "w"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
    else
    {   
		index=autoGeneratedIndex;
        
        	/*printing data tofile*/
        fprintf(fileIndex,"%d",index);//writes the generated index to the record.
             
        fclose(fileIndex);/*close file*/
        	 
    }
}//end function

//reads index from the file
int readAutoIndex()
{
    FILE*readAutoIndex;
    int autoIndex,ans;
    /* open file for reading */
    if ((readAutoIndex= fopen("auto", "r"))==NULL)
    {
      	printf("Cannot open file \n");
      	exit(errno);
    }/*end if*/
 	else
    {
    	fscanf(readAutoIndex,"%d",&autoIndex);
    	ans=autoIndex;
        		 
        	//read and display every line in the file
        while(!feof(readAutoIndex))//while not the end of the file
        {
            fscanf(readAutoIndex,"%d",&autoIndex);
            ans=autoIndex;
        }
        return ans;
        printf("ANS%d",ans);
        fclose(readAutoIndex);  /*close file*/

    }//end else
}//end function


 // checks if the queue is empty 
 bool isEmpty()
{
  	if(readAutoIndex()==-1)
   		return true;
	else 
		return false;
}//  end isEmpty
	

//to determine the number of records in the fileS
int size()
{      
	int numRecords;
     
    numRecords=(readAutoIndex())+1;
    return (numRecords);

}//end size

int mainMenu()//MAIN MENU FUNCTION
{
	int choice;
	
	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");
	printf("============================================================\n\n");
	printf("\t\tMAIN MENU\n\n");
    printf("============================================================\n\n");
    
	printf("============================================================\n\n");
	printf("\tOPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");	
	printf("\t1\t\tCreate a new file\n\n");
	printf("\t2\t\tEnter the employee menu\n\n");
	printf("\t3\t\tEnter the customer menu\n\n");
	printf("\t4\t\tExit the program\n\n");
	printf("============================================================\n\n");
	printf("=>=>=>=>=>=>=>SWAG CITY=>=>=>=>=>=>=>\n\n");
    printf("============================================================\n\n");
    printf("\n\n");
    printf("\n\n");
    printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}
int MenuChoice()//EMPLOYEE MENU FUNCTION
{
    int choice;
    
   	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");
	
	printf("============================================================\n\n         ");
	printf("\t\tEMPLOYEE MENU\n\n");
    printf("============================================================\n\n");
    
    
    printf("============================================================\n\n         ");
	printf("\tOPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");
    
	printf("\t1\t\tAdd Game Information\n\n");
	printf("\t2\t\tDisplay Game information \n\n");
    printf("\t3\t\tUpdate game information\n\n ");
    printf("\t4\t\tDelete game information\n\n ");
 	printf("\t5\t\tDisplay client infomation\n\n");
 	printf("\t6\t\tDelete client information\n\n ");
 	printf("\t7\t\tQuery number of records in the file\n\n");
 	printf("\t8\t\tCheck if the file is empty\n\n");
	printf("\t9\t\tExit menu\n\n ");
   
    printf("============================================================\n\n         ");
	printf("=>=>=>=>=>=>=>SWAG CITY=>=>=>=>=>=>=>\n\n");
    printf("============================================================\n\n         ");


     printf("\n\n");
     printf("\n\n");
     printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}/*End Function*/
void createFile()//CREATE FILE FUNCTION
{
	FILE*inDataFile1;
	int f,val;
	struct gameInfo game={0,0,"","","",0.0}; 
			   	
    if ((inDataFile1 = fopen("myfile5.txt", "wb"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
    else
    {
	    for(f=0;f<=100;f++)
    	{
    		fwrite(&game,sizeof(struct gameInfo),1,inDataFile1);
    	}   
   		printf("============================================================\n\n         ");
		printf("            NEW GAME FILE CREATED                 \n\n");
		printf("============================================================\n\n         ");
		
    	fclose(inDataFile1);
    }
}
void createCustomerFile()//CREATE CUSTOMER FILE FUNCTION
{
	FILE*inDataFile2;
	int f,val; 
	
	autocreateIndex(-1);
   	struct buyerInfo buyer={0,0,0,0,"","","",0.0,0.0,0};  
			   	
    if ((inDataFile2 = fopen("mycustomerfiles.txt", "wb"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
    else
    {
	    for(f=0;f<=100;f++)
    	{
    		fwrite(&buyer,sizeof(struct buyerInfo),1,inDataFile2);
    	}   
   		printf("============================================================\n\n         ");
		printf("            NEW CUSTOMER FILE CREATED                 \n\n");
		printf("============================================================\n\n         ");
		
    	fclose(inDataFile2);
    }
}
void enqueueBuyerInfo(FILE*inDataFile2 , struct buyerInfo buyer)
{
	if ((inDataFile2 = fopen("mycustomerfiles.txt", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    int Auto=readAutoIndex();  //get index from auto file
    
    if( Auto== (LENGTH-1))
        printf("Queue full.");
    else
    {
        Auto= Auto+1;//determine position to write the entered record to in the file
	
		fseek(inDataFile2,( Auto)*sizeof(struct buyerInfo),SEEK_SET);//find point in file to
                                                                                    //write the record
        fwrite(&buyer,sizeof(struct buyerInfo),1,inDataFile2);//write the record
	}//end else
    fclose(inDataFile2);//close the file   
    autocreateIndex(Auto);//write new value of index to the text file
  
}//end enqueueStudentInfo() 

int clientDelete(FILE*inDataFile2)
{              
    int g,val;
    FILE*inDataFileTemp;//another pointer to the file has been created
    
    struct buyerInfo buyer={0,0,0,0,"","","",0.0,0.0,0};  
	struct buyerInfo blankBuyer={0,0,0,0,"","","",0.0,0.0,0};  
     
             //opening a pointer to the file         
	if ((inDataFileTemp = fopen("mycustomerfiles.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/
         
          //opening another  pointer to the file  
    if ((inDataFile2 = fopen("mycustomerfiles.txt", "rb+"))==NULL)
    {
        printf("Cannot open file customer file\n");
        exit(1);
    }/*end if*/
    
    printf("============================================================\n\n         ");
	printf("          \n\n\n\t\t\t DELETE RECORDS                 \n\n");
    printf("============================================================\n\n         "); 
         
    int deleteNum=readAutoIndex();//CALL TO FUNCTION WHICH RETURNS THE INDEX VALUE FROM THE AUTOFILE

	if( deleteNum<0)/* Check for error situation*/
    {
        printf("FILE IS EMPTY. NO RECORDS PRESENT\n");
    }
    else
    {
        fseek(inDataFile2,( 0)*sizeof(struct buyerInfo),SEEK_SET);//SEEK RECORD TO DELETE,I.E THE FIRST RECORD 
        fread(&buyer,sizeof(struct buyerInfo),1,inDataFile2);//READ RECORD TO DELETE
             /*Read Mode*/ 
        if(buyer.buyerAuto==0)// IF THERE IS NO RECORD
        {
            printf("============================================================\n\n         ");
            printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!                 \n\n");
            printf("============================================================\n\n\n\n\n        ");
        }/*end if*/
        if(buyer.buyerAuto!=0)//IF RECORD EXISTS
        {
            fseek(inDataFile2,(1-1)*sizeof(struct buyerInfo),SEEK_SET);
            fwrite(&blankBuyer,sizeof(struct buyerInfo),1,inDataFile2);//OVERWRITE RECORD WITH A BLANK ONE
            printf("============================================================\n\n         ");
        	printf("          \n\n\n\t\t\t DELETE COMPLETE                \n\n");
            printf("============================================================\n\n         "); 
            
            val=buyer.id;
          
            for(g=0;g<deleteNum;g++) //Moving up Records in file AFTER the delete
            {
                fseek(inDataFile2,( g)*sizeof(struct buyerInfo),SEEK_SET);//find   point  G in file 
                fseek(inDataFileTemp,( g+1)*sizeof(struct buyerInfo),SEEK_SET);//find point (G+1) in file 
                fread(&buyer,sizeof(struct buyerInfo),1,inDataFileTemp);    //READ  record IN SLOT (G+1) OF FILE 
                buyer.buyerAuto=g+1;
                fwrite(&buyer,sizeof(struct buyerInfo),1,inDataFile2);//write the record IN SLOT (G+1) OF FILE TO SLOT G                
            }//end for
            autocreateIndex(deleteNum-1);//index decremented by 1 after delete and its new value written to the file
            
        }  //end if  
		        
    	fclose(inDataFileTemp);//close pointer to the file
        fclose(inDataFile2);//close second pointer to the file
        
    } //end else       
   	return val;        
} //end function 
       
int custMenu()//CUSTOMER MENU FUNCTION
{
	int choice;
	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");

	printf("============================================================\n\n         ");
	printf("\t\tCUSTOMER MENU\n\n");
    printf("============================================================\n\n");
    
    printf("============================================================\n\n         ");
	printf("\tOPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");
    
    printf("\t1\t\tPurchase a game\n\n");
	printf("\t2\t\tSearch for Games\n\n");
	printf("\t3\t\tExit menu\n\n ");
	
	printf("============================================================\n\n         ");
	printf("=>=>=>=>=>=>=>SWAG CITY=>=>=>=>=>=>=>\n\n");
    printf("============================================================\n\n         ");

    printf("\n\n");
    printf("\n\n");
    printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}    

int secondMenu()//GAME SEARCH FUNCTION
{
	int choice;
    
   	printf("\n\n");
    printf("\n\n");
    printf("\n\n");
     
    printf("\n\n");
    printf("\n\n");
    printf("\n\n");

	printf("============================================================\n\n         ");
	printf("\t\tGAME SEARCH\n\n");
    printf("============================================================\n\n");
    
    printf("============================================================\n\n         ");
	printf("OPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");
    
	printf("\t1\t\tSearch for Game by name\n\n");
	printf("\t2\t\tSearch for Games by Console\n\n");
	printf("\t3\t\tSearch for Games by price\n\n");
	printf("\t4\t\tSearch for Games by genre\n\n");
	printf("\t5\t\tExit menu\n\n ");

	printf("============================================================\n\n         ");
	printf("=>=>=>=>=>=>=>SWAG CITY=>=>=>=>=>=>=>\n\n");
    printf("============================================================\n\n         ");

    printf("\n\n");
    printf("\n\n");
    printf("Task=====>");
    
    scanf("%d",&choice);
    
    return choice;
}   
void view()//views the contents of the file
{   
	FILE* inDataFile2;
	int num,i;  
    struct buyerInfo buyer={0,0,0,0,"","","",0.0,0.0,0};    

    int Auto=readAutoIndex ();//get index
    
    if ((inDataFile2 = fopen("mycustomerfiles.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/
	else
    {
		/*read and display every line in the file*/
		printf("============================================================\n\n");
	    printf("\n\t\t\tVIEW CUSTOMER RECORDS                 \n\n");
	    printf("============================================================\n\n");
				
				    /*read and display every line in the file*/
		while(!feof(inDataFile2)&&(buyer.buyerAuto<=Auto))
		{
			fread(&buyer,sizeof(struct buyerInfo),1,inDataFile2);
			if(buyer.id!=0)
			{
				num=1;
				printf("\tPOSTION IN QUEUE---->%d\n",buyer.buyerAuto);
				printf("\tID---->%d\n",buyer.id);
				printf("\tFULL NAME---->%s	%s\n",buyer.first_name,buyer.last_name);
				printf("\tNUMBER OF ORDERS---->%d\n",buyer.numOrders);
				printf("\tTOTAL AMOUNT PAID---->%.2f\n\n",buyer.totalAmountDue);
							
				for(i=0;i<buyer.numOrders;i++)
				{
					if(buyer.quant[i]<2)
					{
						printf("\tORDER %d----->1 copy of %s\n",num,buyer.purchase[i]);
					}
					if(buyer.quant[i]>=2)
					{
						printf("\tORDER %d----->%d copies of %s\n",num,buyer.quant[i],buyer.purchase[i]);
					}
					num+=1;
				}
				printf("\n\n\n");
	            printf("============================================================\n\n");
			}
		}
	}
    fclose(inDataFile2);//CLOSE FILE
  
}//end view Function   
void gameRecs()//GAME RECORDS FUNCTION
{
	FILE*inDataFile1;
	struct gameInfo game={0,0,"","","",0.0}; 
    if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");                               
    }
    else
    {
	    printf("============================================================\n\n");
        printf("\t\t\tVIEW GAME RECORDS                 \n\n");
        printf("============================================================\n\n");

	    /*read and display every line in the file*/
	
        while(!feof(inDataFile1))
        {   
            fread(&game,sizeof(struct gameInfo),1,inDataFile1);
            if(game.idGame!=0)
            {
				printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tGAME TYPE------>%s\n\tSTOCK AMOUNT----->%d\n\tPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gameAmount,game.gamePrice);
                printf("\n\n\n");
                printf("============================================================\n\n");
            }  
        }
    }
    fclose(inDataFile1);
} 
int gameUpdateChoices()//GAME UPDATE OPTIONS FUNCTION
{
	int choice;
	
	printf("What would you like to update?\n");
           	
    printf("1. The Price of the game\n");
    printf("2. The Genre of the game\n");
    printf("3. The Console the game is on\n");
    printf("4. The name of the game\n");
           	
	scanf("%d",&choice);
	return choice;
}
int genreChoice()//GENRE LIST FUNCTION
{
	int num;
	printf("Enter number associated with the genre of the game---->\n");
        	    	
	printf("1. Adventure\n");
	printf("2. Action\n");
	printf("3. Horror\n");
	printf("4. Indie\n");
	printf("5. Strategy\n");
	printf("6. RPG\n");
	printf("7. Simulation\n");
	printf("8. FPS\n");
	printf("9. Racing\n");
	printf("10. MOBA\n");
	        	
	scanf("%d",&num);
	return num;	
}
int consoleChoice()//CONSOLE LIST FUNCTION
{
	int num;
	
	printf("Enter the number associated with the console name---->\n");
	
	printf("1. PS4\n");
	printf("2. PS3\n");
	printf("3. Xbox 360\n");
	printf("4. Xbox One\n");
	printf("5. PC\n");
	scanf("%d",&num);
	
	return num;
}
void gameUpdate()//UPDATE GAME PRICE
{
	FILE*inDataFile1;
	int identification,choice,num;
	float amount;
	char name[string_length];
	
	amount=0;
	struct gameInfo game={0,0,"","","",0.0};      
    if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/
    else
	{
		printf("============================================================\n\n");
        printf("\t\t\tUPDATE GAME INFORMATION             \n\n");
        printf("============================================================\n\n");
		
		printf("\tID 		GAME\n\n");
		while(!feof(inDataFile1))
		{
			fread(&game,sizeof(struct gameInfo),1,inDataFile1);
			if(game.idGame!=0)
			{
				printf("\t%d\t\t%s\n",game.idGame,game.game_name);
			}
		}
        printf("Enter game Id to update(1 to 100)--->");
        scanf("%d",&identification);
        
        fseek(inDataFile1,(identification-1)*sizeof(struct gameInfo),SEEK_SET);
        fread(&game,sizeof(struct gameInfo),1,inDataFile1);
        /*Read Mode*/ 
        if(game.idGame==0)
        {
            printf("============================================================\n\n");
			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!                 \n\n");
    		printf("============================================================\n\n\n\n\n");
        }/*end if*/
        if(game.idGame!=0)
        {
            printf("ID---->%d\nNAME---->%s\nCONSOLE----->%s\nGAME TYPE------>%s\nPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gamePrice);
   	        printf("\n\n");
           	
           	choice=gameUpdateChoices();
           	printf("\n\n");
           	
           	while((choice>4)||(choice<1))
           	{
           		printf("That is not one of the options listed\n");
				printf("Please try again\n\n");
           	
	           	choice=gameUpdateChoices();	
			}
			
			if(choice==1)
			{
	   	        printf("Enter the increase(+) or decrease(-)--------->");
	            scanf("%f",&amount);
	            printf("\n\n");
	            
	            game.gamePrice=game.gamePrice+amount;
	      		
	      		printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED GAME PRICE                \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tNAME---->%s\n\tGAME PRICE---->%.2f",game.game_name,game.gamePrice);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
			if(choice==2)
			{
				num=genreChoice();
	           	printf("\n");
	           	
	           	while((num>10)||(num<1))	
				{
					printf("That is not a valid option\n");
					printf("Please try again\n");
					
					num=genreChoice();	
			        printf("\n");
				}
				
	           	if(num==1)
	      		{
	      			strcpy(game.gameType,"Adventure");	
				}
				if(num==2)
	      		{
	      			strcpy(game.gameType,"Action");	
				}
				if(num==3)
	      		{
	      			strcpy(game.gameType,"Horror");	
				}
				if(num==4)
	      		{
	      			strcpy(game.gameType,"Indie");	
				}
				if(num==5)
	      		{
	      			strcpy(game.gameType,"Strategy");	
				}
				if(num==6)
	      		{
	      			strcpy(game.gameType,"RPG");	
				}
				if(num==7)
	      		{
	      			strcpy(game.gameType,"Simulation");	
				}
				if(num==8)
	      		{
	      			strcpy(game.gameType,"FPS");	
				}
				if(num==9)
	      		{
	      			strcpy(game.gameType,"Racing");	
				}
				if(num==10)
	      		{
	      			strcpy(game.gameType,"MOBA");	
				}
				
				printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED GAME GENRE              \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tNAME---->%s\n\tGAME TYPE---->%s",game.game_name,game.gameType);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
			if(choice==3)
			{
				num=consoleChoice();//CALL TO FUNCTION CONSOLE LIST
	      		printf("\n");
	      		
	      		while((num>5)||(num<1))	
				{
					printf("That is not a valid option\n");
					printf("Please try again\n");
					
					num=consoleChoice();//CALL TO FUNCTION CONSOLE LIST
			      	printf("\n");
				}
	      		if(num==1)
	      		{
	      			strcpy(game.console_name,"PS4");	
				}
				if(num==2)
	      		{
	      			strcpy(game.console_name,"PS3");	
				}
				if(num==3)
	      		{
	      			strcpy(game.console_name,"Xbox 360");	
				}
				if(num==4)
	      		{
	      			strcpy(game.console_name,"Xbox One");	
				}
				if(num==5)
	      		{
	      			strcpy(game.console_name,"PC");	
				}
				printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED CONSOLE TYPE             \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tNAME---->%s\n\tCONSOLE---->%s",game.game_name,game.console_name);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
			if(choice==4)
			{
				fflush(stdin);
				
				printf("Enter the new name of the game\n");
				scanf("%[^\n]%*c",&name);
				
				strcpy(game.game_name,name);
				printf("============================================================\n\n");
	        	printf("\t\t\tUPDATED NAME           \n\n");
	       		printf("============================================================\n\n");
	            
				printf("\tID---->%d\n\tNAME---->%s",game.idGame,game.game_name);
	   	        printf("\n\n");
	   	  	
				printf("============================================================\n\n");
			}
   	  		
   	        fseek(inDataFile1,(game.idGame-1)*sizeof(struct gameInfo),SEEK_SET);
            fwrite(&game,sizeof(struct gameInfo),1,inDataFile1);
            fclose(inDataFile1);    
    	}   /*end if*/  
	} /*end else*/
}
void gameDelete()//GAME DELETE FUNCTION
{
	FILE*inDataFile1;
	
	int identification;
	struct gameInfo game={0,0,"","","",0.0}; 
    struct gameInfo blankGame={0,0,"","","",0.0}; 
     
	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }
            
	printf("============================================================\n\n");
	printf("\t\t\t DELETE RECORDS                 \n\n");
	printf("============================================================\n\n"); 
    
	printf("\tID 		GAME\n\n");
	while(!feof(inDataFile1))
	{
		fread(&game,sizeof(struct gameInfo),1,inDataFile1);
		if(game.idGame!=0)
		{
			printf("\t%d\t\t%s\n\n",game.idGame,game.game_name);
		}
	}                  
    printf("Enter the Id of the game to delete(1 to 100)--->");
    scanf("%d",&identification);         
    printf("\n\n");
    
    fseek(inDataFile1,(identification-1)*sizeof(struct gameInfo),SEEK_SET);
    fread(&game,sizeof(struct gameInfo),1,inDataFile1);
    /*Read Mode*/ 
    if(game.idGame==0)
    {
	    printf("============================================================\n\n");
		printf("             !!!!!!RECORD DOES NOT EXIST!!!!!!                 \n\n");
    	printf("============================================================\n\n\n\n\n");
    }
    if(game.idGame!=0)
    {
        fseek(inDataFile1,(game.idGame-1)*sizeof(struct gameInfo),SEEK_SET);
           
        fwrite(&blankGame,sizeof(struct gameInfo),1,inDataFile1);
        printf("============================================================\n\n");
		printf("\t\t\t DELETE COMPLETE                \n\n");
    	printf("============================================================\n\n"); 
    }            
    fclose(inDataFile1);	
}

void employeeMen()//EMPLOYEE MENU FUNCTION
{
	FILE*inDataFile1;
	FILE*inDataFile2;
	
	int result3,f,identification,num,i;

	struct gameInfo game={0,0,"","","",0.0}; 
 	result3=MenuChoice();
 	while(result3!=9)
 	{
 		if(result3==1)
 		{
        	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
            {
            	printf("Cannot open file \n");
            	exit(1);
           	}
			
			printf("============================================================\n\n");
			printf("\t\t\t ADD GAME RECORDS               \n\n");
    		printf("============================================================\n\n"); 
              
            printf("Enter the game Id(between 1 and 100)--->");
            scanf("%d",&game.idGame);
            
            fflush(stdin);//removes new line
            	
            printf("Enter the name of the game--->");
            scanf("%[^\n]%*c",&game.game_name);
			
			num=consoleChoice();
      		printf("\n");
      		
      		while((num>5)||(num<1))	
			{
				printf("That is not a valid option\n");
				printf("Please try again\n");
				
				num=consoleChoice();
		      	printf("\n");
			}
      		if(num==1)
      		{
      			strcpy(game.console_name,"PS4");	
			}
			if(num==2)
      		{
      			strcpy(game.console_name,"PS3");	
			}
			if(num==3)
      		{
      			strcpy(game.console_name,"Xbox 360");	
			}
			if(num==4)
      		{
      			strcpy(game.console_name,"Xbox One");	
			}
			if(num==5)
      		{
      			strcpy(game.console_name,"PC");	
			}
			  	
        	num=genreChoice();
           	printf("\n");
           	
           	while((num>10)||(num<1))	
			{
				printf("That is not a valid option\n");
				printf("Please try again\n");
				
				num=genreChoice();
		        printf("\n");
			}
           	if(num==1)
      		{
      			strcpy(game.gameType,"Adventure");	
			}
			if(num==2)
      		{
      			strcpy(game.gameType,"Action");	
			}
			if(num==3)
      		{
      			strcpy(game.gameType,"Horror");	
			}
			if(num==4)
      		{
      			strcpy(game.gameType,"Indie");	
			}
			if(num==5)
      		{
      			strcpy(game.gameType,"Strategy");	
			}
			if(num==6)
      		{
      			strcpy(game.gameType,"RPG");	
			}
			if(num==7)
      		{
      			strcpy(game.gameType,"Simulation");	
			}
			if(num==8)
      		{
      			strcpy(game.gameType,"FPS");	
			}
			if(num==9)
      		{
      			strcpy(game.gameType,"Racing");	
			}
			if(num==10)
      		{
      			strcpy(game.gameType,"MOBA");	
			}
           	    	
            printf("Enter price of the game[Between 1 and 250]---->");
            scanf("%f",&game.gamePrice);  
            
			while((game.gamePrice>250)||(game.gamePrice<1))
			{
				printf("I think you may have entered an incorrect price\n");
				printf("Please try again\n");
				printf("Enter price of the game---->");
            	scanf("%f",&game.gamePrice); 
			}
			
            printf("Enter the amount of the game in stock---->");
            scanf("%d",&game.gameAmount);
         	
         	fseek(inDataFile1,(game.idGame-1)*sizeof(struct gameInfo),SEEK_SET);
         	fwrite(&game,sizeof(struct gameInfo),1,inDataFile1);
         	fclose(inDataFile1);
	        result3=MenuChoice();/*call to function MenuChoice*/ 
		}
		if(result3==2)
		{
			gameRecs();
    		result3=MenuChoice();/*call to function MenuChoice*/		
		}
		if(result3==3)
		{
			gameUpdate();
    	  	result3=MenuChoice();/*call to function MenuChoice*/	
		}
		if(result3==4)
		{
			gameDelete();
          	result3=MenuChoice();/*call to function MenuChoice*/
		}
		if(result3==5)
		{
			view();
    		result3=MenuChoice();/*call to function MenuChoice*/
		}
		if(result3==6)
		{
			int ids=clientDelete(inDataFile2);  //CALL TO FUNCTION THAT REMOVES STUDENTS IN FILE.STUDENTS ARE REMOVED   
                                         //USING THE FIRST IN FIRST OUT PRINCIPLE(FIFO)
            printf("\n\n");
            printf("=======RECORD WITH ID \t%d HAS BEEN DELETED======\n\n",ids);
			result3=MenuChoice();
		}
		if(result3==7)
		{
			int numberRecords=size(); //CALL TO FUNCTION THAT RETURNS THE NUMBER OF RECORDS IN THE FILE   
	        printf("============================================================\n\n         ");
		    printf("Number of records in the file---->%d\n\n",numberRecords);
	        printf("============================================================\n\n         ");
	   
	    
	        result3=MenuChoice();/*call to function MenuChoice*/
		}
		if(result3==8)
		{
			if (isEmpty()) //CALL TO FUNCTION THAT RETURNS THE NUMBER OF RECORDS IN THE FILE   
		    {  
				printf("============================================================\n\n");
                printf("\n\t\t\tFILE IS EMPTY                 \n\n");
                printf("============================================================\n\n");
		    }//end if 
		   	else
		   	{
		   		printf("============================================================\n\n");
                printf("\n\t\t\tFILE IS NOT EMPTY                 \n\n");
                printf("============================================================\n\n");

		    }//end else             
		    result3=MenuChoice();/*call to function MenuChoice*/
     
		}
		if((result3<1)||(result3>9))
		{
			printf("============================================================\n\n");
			printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		
			result3=MenuChoice();
		}	
	}
}
void custMen()//CUSTOMER MENU FUNCTION
{
	FILE*inDataFile1;
	FILE*inDataFile2;
	
	int result4,amount,found,result2,id,num;
	float price,cost,price2,temp;
	char name[string_length],confirm2[string_length],confirm[string_length];
	
	found=0;
	
	result4=custMenu();
	struct buyerInfo buyer={0,0,0,0,"","","",0.0,0.0,0};  
	struct gameInfo game={0,0,"","","",0.0}; 
	
	buyer.numOrders=0;
			
	while(result4!=3)
	{
		if(result4==1)
		{
			if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
    		{
        		printf("Cannot open file \n");
        		exit(1);
        	}
        	
        	if((inDataFile2=fopen("mycustomerfiles.txt","rb+"))==NULL)
        	{	printf("Cannot open customer file \n");
        		exit(1);
        	}
        	
        	int passAuto=readAutoIndex();
         
            buyer.buyerAuto=readAutoIndex()+2;
        	
			printf("============================================================\n\n");
            printf("\n\t\t\tGAME PURCHASING                \n\n");
            printf("============================================================\n\n");

			printf("Enter the buyer's id--->");
			scanf("%d",&buyer.id);
			printf("\n");
			
			printf("Enter the buyer's first name--->");
			scanf("%s",&buyer.first_name);
			printf("\n");
					
			printf("Enter the buyer's last name--->");
			scanf("%s",&buyer.last_name);
			printf("\n");
			
			printf("Enter the buyer's age--->");
			scanf("%d",&buyer.age);	
			printf("\n");
			
			printf("ID 	PRICE	STOCK	GAME\n\n");
			
			while(!feof(inDataFile1))
			{
				fread(&game,sizeof(struct gameInfo),1,inDataFile1);
				if(game.idGame!=0)
				{
					printf("%d\t%.2f\t%d\t%s\n\n",game.idGame,game.gamePrice,game.gameAmount,game.game_name);
				}
			}
			
			printf("Enter the ID of the game the buyer wants to purchase(-1 to terminate order)\n");
			scanf("%d",&id);
			
			while(id!=-1)
			{
				printf("=========================================================================\n\n");
           		printf("\n\t\t\tCONTINUING WITH YOUR PURCHASE!!!!!               \n\n");
            	printf("=========================================================================\n\n");
				
				fseek(inDataFile1,(id-1)*sizeof(struct gameInfo),SEEK_SET);
				fread(&game,sizeof(struct gameInfo),1,inDataFile1);
				
				if(game.idGame==0)
				{
					printf("============================================================\n\n");
           			printf("\n\t\t\tGAME DOES NOT EXIST!!!!!               \n\n");
            		printf("============================================================\n\n");
				}
				if(game.idGame!=0)
				{
					printf("Name of the requested game---->%s\n\n",game.game_name);
					
					printf("Enter how many copies of %s you would like to purchase--->",game.game_name);
					scanf("%d",&num);
					
					cost=game.gamePrice*num;
					
					printf("Amount due--->%.2f\n",cost);
					
					if(num>game.gameAmount)
					{
						printf("There are not enough copies in stock\n");
					}
					else
					{
						game.gameAmount=game.gameAmount-num;
					}
					fseek(inDataFile1,(game.idGame-1)*sizeof(struct gameInfo),SEEK_SET);
					fwrite(&game,sizeof(struct gameInfo),1,inDataFile1);
					
					strcpy(buyer.purchase[buyer.numOrders],game.game_name);
					
					buyer.quant[buyer.numOrders]=num;
					buyer.amountDue[buyer.numOrders]=cost;
					buyer.totalAmountDue+=buyer.amountDue[buyer.numOrders];
					buyer.numOrders+=1;
				}
				fclose(inDataFile1);
				inDataFile1=fopen("myfile5.txt","rb+");
				
				printf("ID 	PRICE	STOCK	GAME\n\n");
			
				while(!feof(inDataFile1))
				{
					fread(&game,sizeof(struct gameInfo),1,inDataFile1);
					if(game.idGame!=0)
					{
						printf("%d\t%.2f\t%d\t%s\n\n",game.idGame,game.gamePrice,game.gameAmount,game.game_name);
					}
				}
				
				printf("Enter the ID of the game the buyer wants to purchase(-1 to terminate order)\n");
				scanf("%d",&id);
			}
			
			enqueueBuyerInfo(inDataFile2,buyer);
			fclose(inDataFile1);
			fclose(inDataFile2);
					
	       	result4=custMenu();
	    }
	    if(result4==2)
	    {
	       	struct gameInfo game={0,0,"","","",0.0}; 
        
        	if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
        	{
                printf("Cannot open file \n");
                exit(1);
        	}/*end if*/
       		else
			{
				result2=secondMenu();
            	struct gameInfo game={0,0,"","","",0.0};
				 
            	while(result2!=5)
            	{
            		if(result2==1)
            		{
            			printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY NAME                \n\n");
                		printf("============================================================\n\n");
						
						fflush(stdin);//removes new line
            
            			printf("Enter the name of the game you wish to search for--->");
            			scanf("%[^\n]%*c",&name);
            		
						if ((inDataFile1 = fopen("myfile5.txt", "rb+"))==NULL)
            			{
                			printf("Cannot open file\n");                               
           				}
            			else
        			    {	
							found=0;            		
                			while(!feof(inDataFile1))
                			{   
                    			fread(&game,sizeof(struct gameInfo),1,inDataFile1);
            					if(stricmp(name,game.game_name)==0)
            					{
            						found+=1;
            						printf("\n");
            						printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tGAME TYPE------>%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gameAmount,game.gamePrice);
                    	   			printf("\n\n\n");
                        		}
							}
							printf("============================================================\n\n");
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO GAMES BY THAT NAME!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
							
						}
						fclose(inDataFile1);
            			result2=secondMenu();
            		}
            		if(result2==2)
            		{
            			printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY CONSOLE                \n\n");
                		printf("============================================================\n\n");

						fflush(stdin);
            			printf("Enter the name of the console you wish to search for--->\n");
		           		
						printf("1. PS4\n");
						printf("2. PS3\n");
						printf("3. Xbox 360\n");
						printf("4. Xbox One\n");
						printf("5. PC\n");
						        	
						scanf("%[^\n]%*c",&name);
		           		
		           		if((stricmp(name,"PS4")!=0)&&(stricmp(name,"PS3")!=0)&&(stricmp(name,"PC")!=0)&&(stricmp(name,"Xbox 360")!=0)&&(stricmp(name,"Xbox One")!=0))
						{
							while((stricmp(name,"PS4")!=0)&&(stricmp(name,"PS3")!=0)&&(stricmp(name,"PC")!=0)&&(stricmp(name,"Xbox 360")!=0)&&(stricmp(name,"Xbox One")!=0))
							{
								printf("\n\n");
								printf("That is not one of the consoles listed\n");
								printf("Please try again\n");
									
								fflush(stdin);
								
						        printf("Enter the name of the console you wish to search for--->\n");
						        printf("1. PS4\n");
						        printf("2. PS3\n");
						    	printf("3. Xbox 360\n");
						    	printf("4. Xbox One\n");
						        printf("5. PC\n");
						        scanf("%[^\n]%*c",&name);
						      	printf("\n");
						    }
						}	
							
		           		if ((inDataFile1 = fopen("myfile5.txt","rb+"))==NULL)
		           		{
		               		printf("Cannot open file\n");                               
		          		}
		          		else
		       			{	
							found=0;
									            		
		               		while(!feof(inDataFile1))
		               		{   
		                   		fread(&game,sizeof(struct gameInfo),1,inDataFile1);
		           				if(stricmp(name,game.console_name)==0)
		           				{
		            				found+=1;
		           					printf("\n");
		            				printf("============================================================\n\n");
		            				printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tGAME TYPE------>%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gameAmount,game.gamePrice);
		                   	    	printf("\n\n\n");
								}
							}
							printf("============================================================\n\n");
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO GAMES ON THAT CONSOLE!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
						}
						fclose(inDataFile1);
		            	result2=secondMenu();
					}
		           	if(result2==3)
		           	{
		           		printf("============================================================\n\n");
                		printf("\n\t\t\tSEARCH BY PRICE                \n\n");
                		printf("============================================================\n\n");
						
		           		printf("Enter the price range of the game that you wish to search for[Between 1 and 250] --->");
		           		scanf("%f %f",&price,&price2); 
			            
			            if(price>price2)
			            {
			            	temp=price;
			            	price=price2;
			            	price2=temp;
						}
						
						while((price>250)||(price<1))
						{
							printf("I think you may have entered an incorrect price\n");
							printf("Please try again\n");
							
							printf("Enter the price range of the game that you wish to search for[Between 1 and 250]---->");
			            	scanf("%f %f",&price,&price2); 
						}	
		           		if ((inDataFile1 = fopen("myfile5.txt","rb+"))==NULL)
		            	{
		               		printf("Cannot open file\n");                               
		          		}
		           		else
		       			{	 
							found=0;           		
		                	while(!feof(inDataFile1))
		               		{   
		                   		fread(&game,sizeof(struct gameInfo),1,inDataFile1);
		           				if((game.gamePrice>price)&&(game.gamePrice<price2))
		           				{
		            				found+=1;
		           					printf("\n");
		           					printf("============================================================\n\n");
		           					printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tGAME TYPE------>%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gameAmount,game.gamePrice);
		                   	    	printf("\n\n\n");
		                    	    printf("============================================================\n\n");
								}
							}
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO GAMES OF THAT PRICE!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
						}
		            	result2=secondMenu();
					}
					if(result2==4)
            		{
            			printf("============================================================\n\n");
               			printf("\n\t\t\tSEARCH BY GENRE               \n\n");
               	 		printf("============================================================\n\n");

            			printf("Enter the genre of the game you wish to search for--->\n");
		            	
						printf("1. Adventure\n");
						printf("2. Action\n");
						printf("3. Horror\n");
						printf("4. Indie\n");
						printf("5. Strategy\n");
						printf("6. RPG\n");
						printf("7. Simulation\n");
						printf("8. FPS\n");
						printf("9. Racing\n");
						printf("10. MOBA\n");
						
						scanf("%s",&name);
						printf("\n");
						
						if((stricmp(name,"Adventure")!=0)&&(stricmp(name,"Action")!=0)&&(stricmp(name,"Horror")!=0)&&(stricmp(name,"Strategy")!=0)&&(stricmp(name,"Indie")!=0)&&(stricmp(name,"RPG")!=0)&&(stricmp(name,"Simulation")!=0)&&(stricmp(name,"FPS")!=0)&&(stricmp(name,"Racing")!=0)&&(stricmp(name,"MOBA")!=0))
							{
								while((stricmp(name,"Adventure")!=0)&&(stricmp(name,"Action")!=0)&&(stricmp(name,"Horror")!=0)&&(stricmp(name,"Strategy")!=0)&&(stricmp(name,"Indie")!=0)&&(stricmp(name,"RPG")!=0)&&(stricmp(name,"Simulation")!=0)&&(stricmp(name,"FPS")!=0)&&(stricmp(name,"Racing")!=0)&&(stricmp(name,"MOBA")!=0))
								{
									printf("That is not one of the genres listed\n");
									printf("Please try again\n");
									
						           	printf("Enter the genre of the game you wish to search for--->\n");
		            	
									printf("1. Adventure\n");
									printf("2. Action\n");
									printf("3. Horror\n");
									printf("4. Indie\n");
									printf("5. Strategy\n");
									printf("6. RPG\n");
									printf("7. Simulation\n");
									printf("8. FPS\n");
									printf("9. Racing\n");
									printf("10. MOBA\n");
									
									scanf("%s",&name);
									printf("\n");
						      	}
							}		
		            	if ((inDataFile1 = fopen("myfile5.txt","rb+"))==NULL)
		            	{
		                	printf("Cannot open file\n");                               
		           		}
		            	else
		        		{	
							found=0;
									            		
		                	while(!feof(inDataFile1))
		                	{   
		                    	fread(&game,sizeof(struct gameInfo),1,inDataFile1);
		            			if(stricmp(name,game.gameType)==0)
		            			{
		            				found+=1;
		            				printf("\n");
		            				printf("============================================================\n\n");
		            				printf("\tID---->%d\n\tNAME---->%s\n\tCONSOLE----->%s\n\tGAME TYPE------>%s\n\tNUMBER OF COPIES----->%d\n\tPRICE---->%3.2f",game.idGame,game.game_name,game.console_name,game.gameType,game.gameAmount,game.gamePrice);
		                    	    printf("\n\n\n");
								}
							}
							printf("============================================================\n\n");
							if(found==0)
							{
								printf("============================================================\n\n");
								printf("             !!!!!!THERE ARE NO GAMES OF THAT GENRE!!!!!!\n\n");
		    					printf("============================================================\n\n\n\n\n");	
							}
						}
						fclose(inDataFile1);
		            	result2=secondMenu();
					}
					if((result2<1)||(result2>5))
					{
						printf("============================================================\n\n");
						printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
						printf("============================================================\n\n\n\n\n");			
						
						result2=secondMenu();
					}	
				}
		    	result4=custMenu();/*call to function MenuChoice*/	
			}
		}
		if((result4<1)||(result4>3))
		{
			printf("============================================================\n\n");
			printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		
			result4=custMenu();
		}
	}	
}
main()
{
	FILE*inDataFile1;//POINTER TO FILE
	
    int result,f,fault,left,val,remTries,wrongPass;
	char search[string_length];
	char password[10];
	
	fault=1;
	left=2;
	
	printf("Enter the password\n");
	scanf("%s",&password);
	
	if(strcmp(password,"bob")!=0)
	{
		while(strcmp(password,"bob")!=0)
		{
			printf("INVALID PASSWORD\n");
			if(left==1)
			{
				printf("You have %d chance to enter the correct password\n",left);
				scanf("%s",&password);
			}
			else
			{
				printf("You have %d chances to enter the correct password\n",left);
				scanf("%s",&password);
			}
			left=left-1;
			fault+=1;
			if((fault==3)&&(stricmp(password,"bob")!=0))
			{
				exit(0);
			}
		}
	}
	if(strcmp(password,"bob")==0)
	{
		printf("Welcome\n");
		
		result=mainMenu();
	}
	
	while(result!=4)
   	{	
    	if(result==1)
    	{
    		printf("Do you want to create a game file or a customer file\n");
    		printf("1. Game File\n");
    		printf("2. Customer File\n");
			scanf("%d",&val);
			
			while((val<1)||(val>2))
            {
            	printf("That is not a valid option\n");
            	printf("Do you want to create a game file or a customer file\n");
    			printf("1. Game File\n");
    			printf("2. Customer File\n");
				scanf("%d",&val);
			}
			if(val==1)
			{
            	createFile();
            }
            if(val==2)
            {
            	createCustomerFile();	
			}
		}
		if(result==2)//PROMPT USER FOR INFO TO FILL RECORD
  		{
  			remTries=2;
			wrongPass=1;
	
  			printf("Enter the password\n");
			scanf("%s",&password);
			
			if(strcmp(password,"kate")!=0)
			{
				while(strcmp(password,"kate")!=0)
				{
					printf("INVALID PASSWORD\n");
					if(remTries==1)
					{
						printf("You have %d chance to enter the correct password\n",remTries);
						scanf("%s",&password);
					}
					else
					{
						printf("You have %d chances to enter the correct password\n",remTries);
						scanf("%s",&password);
					}
					remTries=remTries-1;
					wrongPass+=1;
					
					if((wrongPass==3)&&(stricmp(password,"kate")!=0))
					{
						exit(0);
					}
				}
			}
			if(strcmp(password,"kate")==0)
			{
				printf("Welcome\n");
				
				employeeMen();
			}
		}	
		if(result==3)
		{
			custMen();		
		}
		if((result>4)||(result<1))
		{
			printf("============================================================\n\n");
			printf("             !!!!!!THAT IS NOT A VALID OPTION!!!!!!\n\n");
		    printf("============================================================\n\n\n\n\n");			
		}
		result=mainMenu();	
	}	 
}

